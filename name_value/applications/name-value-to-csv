#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

readonly scriptname=$( basename $0 )
readonly default_delimiter=,

function usage
{
    cat <<END >&2

take indexed path-value entries (with optional prefix) on stdin and output them as csv sorted by index to stdout according to the provided fields

options:
    --fields <fields>: path-value fields of each entry
    --prefix <prefix>: optional prefix
    --path <path>: same as --prefix
    --unbuffered,-u: assume that input stream is sorted by index and use no buffering
    --delimiter,-d <delimiter>: default $default_delimiter

example 1:

    cat <<EOF | $scriptname --fields=name,value,status --prefix=my/test
my/test[0]/name=a
my/test[0]/value=10
my/test[0]/status=0
my/test[1]/name=b
my/test[1]/value=20
my/test[1]/status=1
EOF

    yields

a,10,0
b,20,1

example 2:

    cat <<EOF | sed 's@^my/test@[0]@' | $scriptname --fields=name,value,status
my/test/status=0
my/test/value=10
my/test/name=a
EOF

    yields

a,10,0

END
    exit
}

function parse_input
{
    sed $option_unbuffered -r -n 's@^'"$option_prefix"'\[([0-9]+)\]/([^=]+)=([^ \t#]*)[ \t]*(#.*)?$@\1 \2 \3@p; $a\' \
        | if [[ -n "$option_unbuffered" ]]; then cat; else sort -k 1,1 -n; fi
}

function output_line
{
    for f in ${fields[@]}; do echo ${csv[$f]}; done | paste -s -d${option_delimiter::1}
}

option_delimiter=$default_delimiter
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help|-h)  usage ;;
        --fields=*) option_fields="${1#*=}" ;;
        --fields) shift; option_fields="$1" ;;
        --prefix=*|--path=*) option_prefix="${1#*=}" ;;
        --prefix|--path) shift; option_prefix="$1" ;;
        --delimiter=*|-d=*) option_delimiter="${1#*=}" ;;
        --delimiter|-d) shift; option_delimiter="$1" ;;
        --unbuffered|-u) option_unbuffered=-u ;;
    esac
    shift
done

if [[ -z "$option_fields" ]]; then echo "$scriptname: fields are not specified" >&2; exit 1; fi
fields=( $( echo "$option_fields" | tr ',' '\n' ) )
declare -A csv
while read index field value; do
    [[ -z "$index" ]] && break
    [[ -z "$current_index" ]] && current_index=$index
    if (( index < current_index )); then echo "$scriptname: expected input sorted by index, but got index $index < previous index of $current_index" >&2; exit 1; fi
    if (( index > current_index )); then
        output_line
        csv=()
        current_index=$index
    fi
    [[ -n "$field" ]] && csv[$field]=$value
done < <( parse_input )
if [[ -n "$current_index" ]]; then output_line; fi
