/*!

@mainpage comma library

@n
@section motivation Motivation

@subsection great_divide Great divide
Being a non-reflective language, C++ notoriously suffers of the great divide between strongly typed structures and serialized data representation.

If one wants to represent one's C++ objects as XML, JSON, CSV, telecom protocol packets, etc, she or he often needs a number of libraries, often with convoluted, coupled, and opaque interfaces.

The core purpose of the <b> @c comma </b> library is to cross this divide in simple, generic, non-intrusive, and decoupled way.

In the spirit of <a href=http://en.wikipedia.org/wiki/Pareto_principle>Pareto Principle</a>, the <b> @c comma </b> library serves well 70 per cent of common use cases. The practice shows that the remaining 30 per cent tend to never happen.
 

@subsection real_time_data_streams Real time data streams

<b> @c comma </b> was written to handle heavy streams of data in real time. It makes implementation of communication protocols easy. Often it allows handling third-party data on the fly. Its toolkit of command-line utilities allows to slice and dice offline and real-time data.
 

@subsection misc Misc

Additionally, <b> @c comma </b> implements various generic concepts that seemed to be missing in other open-source libraries at the time of its implementation.


@n
@section library_structure Library overview
@n

The core concepts of <b> @c comma </b> are visiting and visitors. Visiting and visitors are fully decoupled. It is easy to write custom visitors.

Libraries implementing the core concepts:

- @b @c csv : comma-separated data visitors and streams
- @b @c name_value : name-value style visitors and streams (e.g. xml, json)
- @b @c visiting : library implements core concepts of non-intrusive visiting of arbitrary classes

Other libraries:

- @b @c application : helper classes: command line options, simple signal handlers
- @b @c base : integral type definitions, exceptions
- @b @c containers : cyclic buffer, etc
- @b @c dispatch : generic double dispath
- @b @c io : helper classes for socket streams, files streams, etc
- @b @c math : floating point comparison, intervals, cyclic values, etc
- @b @c packed : classes for easy definition of communication protocol packets
- @b @c string : split, join, and other string utilities
- @b @c xpath : class for xpaths like "/hello/world", "a.b.c[3].d" and operations on them, etc


@n
@section installation Installation
@n
@subsection linux Linux
@todo
@subsection windows Windows
@todo


*/