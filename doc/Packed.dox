/**

\page PackedTutorial packed tutorial

The Packed library helps easily write strongly typed data structures to implement telecom packet layouts.

\section PackedSimple A simple example

Assume that we have to send and receive a 12-byte packet containing time updates with the following fields:

\code
type ("loc" or "utc"; string; 3 bytes)
padding (1 byte)
seconds (from epoch; 4 bytes; big-endian)
microseconds (from epoch; 4 bytes; big-endian)
\endcode

Then we simply define a structure:

\code
#include <comma/packed/packed.h>

struct TimePacket : public comma::packed::struct< TimePacket, 12 >
{
    comma::packed::string< 3 > type;
    comma::packed::byte padding;
    comma::packed::net_uint32 seconds;
    comma::packed::net_uint32 microseconds;
};
\endcode

If we want to fill a packet and send it over, say, a socket:

\code
TimePacket packet;
packet.type = "utc";
packet.seconds = 12345;
packet.microseconds = 0;
::write( socket, (char*)&packet, TimePacket::size ); 
\endcode

If we want to receive packet over a socket and retrieve the field values from the packet:

\code
TimePacket packet;
::read( socket, (char*)&packet, TimePacket::size );
std::string type = packet.type();
unsigned int seconds = packet.seconds();
unsigned int microseconds = packet.microseconds(); 
\endcode    

Thus, the assignment of a field has semantics of a normal assignment; retrieving the field value is almost as natural.

\section PackedNested Nested structures

Suppose, our packet consists of a header and body; and we defined elsewhere Header and Body classes, using Packed library.

\code
struct Header : public comma::packed::struct< Header, 4 > ...
struct Body : public comma::packed::struct< Body, 48 > ...
\endcode

Let us assemble the packet structure:

\code
struct Packet : public comma::packed::struct< Packet, Header::size + Body::size >
{
    Header header;
    Body body;
};
\endcode

We can refer to the members of header and body naturally both for reading and writing:

\code
Packet packet;
packet.header.type = "abc";
packet.header.flag = 123;
packet.body.some_field = 55;
// etc
\endcode

Sending and receiving the packet with nested structures is the same as in the simple example above.

\section PackedFieldType Field Types

Currently, the field types implemented are:

\li byte
\li char
\li little endian int: little-endian integers
\li net int: big-endian integers
\li string: fixed-length string
\li struct: an arbitrary packed structure

It is easy to add more types, deriving them from Packed::Field, which is the base class for all the types above.

*/

