/**

\page NameValueTutorial name_value tutorial

The name_value library contains 2 classes, \ref NameValueParser and a \ref NameValueMap.

\section NameValueParser name_value::parser

The purpose of the name_value parser is to serialize / deserialize plain data structures to / from a name-value format:
\code
"name1=value1;name2=value2;nested/name=value3"
\endcode

\subsection NameValueTutorialGet Getting a structure from a string

Let's declare a struct containing some configuration:

\code
    struct Config
    {
        Config() : size(0), alpha(0), beta(0) {}
        Config( const std::string& name, int s, double a, double b ):
            filename( name ), size( s ), alpha( a ), beta( b ) {}
        std::string filename;
        int size;
        double alpha;
        double beta;        
    };
\endcode

We need to write the visiting traits for this struct:

\code
namespace Ark { namespace Visiting {

template <> struct Traits< Config >
{
    template < typename Key, class Visitor >
    static void visit( Key, Config& config, Visitor& v )
    {
        v.apply( "filename", config.filename );
        v.apply( "size", config.size );
        v.apply( "alpha", config.alpha );
        v.apply( "beta", config.beta );
    }

    template < typename Key, class Visitor >
    static void visit( Key, const Config& config, Visitor& v )
    {
        v.apply( "filename", config.filename );
        v.apply( "size", config.size );
        v.apply( "alpha", config.alpha );
        v.apply( "beta", config.beta );
    }
};

} } // namespace Ark { namespace Visiting {
\endcode

Now we can deserialize it from the following string:

\code
    std::string s = "filename=data.csv;size=100;alpha=0.1;beta=0.3";
    comma::name_value::parser nameValue;
    Config config = nameValue.get< Config >( s );
\endcode

\subsection NameValueTutorialPut Putting a structure into a string

We can serialize the structure back into a string using name_value::put()

\code
    Config config( "test.txt", 10, 1, 2 );
    comma::name_value::name_value nameValue;
    std::string s = nameValue.put( config );
\endcode

Now s contains "filename=test.txt;size=10;alpha=1;beta=2"

\subsection NameValueTutorialUnNamed Nameless values

Sometimes we may want to have values without names, for example to write shorter command line options.
For example, we can write "test.txt;size=10;alpha=1;beta=2", omitting that test.txt is the file name.
In that case, we can pass default names to the name_value parser, which will be added to the name-less values:

\code
    std::string s = "data.csv;size=100;alpha=0.1;beta=0.3";
    comma::name_value::parser nameValue( "filename" );
    Config config = nameValue.get< Config >( s );
\endcode

The default names can be passed as comma separated fields. For example, if we also don't want to write the name "alpha", we can do:

\code
    std::string s = "data.csv;size=100;0.1;beta=0.3";
    comma::name_value::parser nameValue( "filename,,alpha" );
    Config config = nameValue.get< Config >( s );
\endcode

\subsection NameValueTutorialNested Nested structures
The name_value parser also supports nested structures.
\code
    struct Nested
    {
        int a;
        int b;
    };
    struct Config
    {
        std::string filename;
        int size;
        double alpha;
        Nested nested;
        double beta;
    };
\endcode

The nested values can be accessed via XPath:

\code
    std::string s = "filename=data.csv;size=100;alpha=0.1;nested/a=1;nested/b=2;beta=0.3";
    comma::name_value::Parser nameValue;
    Config config = nameValue.get< Config >( s );
\endcode

If fullPathAsName is set to false in the constructor and there is no name conflict between the nested structures, we can use only the leaf of the XPath:
\code
    std::string s = "filename=data.csv;size=100;alpha=0.1;a=1;b=2;beta=0.3";
    comma::name_value::Parser nameValue( ';', '=', false );
    Config config = nameValue.get< Config >( s );
\endcode

\section NameValueMap name_value::map

The purpose of name_value::map is to extract name-value pairs out of a string in name-value format:
\code
"name1=value1;name2=value2;nested/name=value3"
\endcode

On construction, name_value::map parses the input string and constructs a map of name-value pairs. This map can be queried with the exists() and value() functions.
The value() method supports default values.
\code
    std::string s = "filename=data.csv;size=100;alpha=0.1;beta=0.3";
    comma::name_value::map nameValue( s );
    bool hasFileName = nameValue.exists( "filename" ); // will be true
    bool hasType = nameValue.exists( "type" ); // will be false
    double alpha = nameValue.value<double>( "alpha" ); // will be 0.1
    double gamma = nameValue.value<double>( "gamma", 0.2 ); // will be 0.2
\endcode

name_value::map supports names without values:

\code
    std::string s = "filename=data;binary";
    comma::name_value::map nameValue( s );
    bool binary = nameValue.exists( "binary" ); // will be true
\endcode



*/

