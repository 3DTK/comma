#!/bin/bash

name=$( basename $0 )

simple_usage()
{
    echo "Usage: $name [-h|--help] [-c|--clear] { <old-value> <new-value> }" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

usage()
{
    simple_usage
    cat >&2 <<EOF

Substitutes one value for another in the comma separated input.

Options:

    -h|--help       Show this help message
    -c|--clear      Set all fields not mentioned on the command line to empty

Example:

    echo "a,b,c,d" | $name --clear b B c C        (output: ",B,C,")

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

if [[ $# == 0 ]]; then simple_usage 1; fi

clear_other_fields=0
old_vals=
new_vals=
toggle=1
sep=

while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help) usage 0 ;;
    -c|--clear) clear_other_fields=1;;
    -*) echo "$name: unrecognized option '$1'" >&2; exit 1 ;;
    *)  if [[ $1 = *,* ]]; then echo "$name: values cannot contain a comma" >&2; exit 1; fi
        if (( toggle )); then old_vals+="$sep$1"; else new_vals+="$sep$1"; sep=","; fi
        toggle=$(( !toggle ))
    esac
    shift
done

if [[ -z "$old_vals" ]]; then simple_useage 1; fi

if (( ! toggle )); then
    echo "$name: expected an even number of arguments (as <old-value> <new-value> pairs)" >&2
    exit 1
fi

old_vals=$( echo "$old_vals" | sed 's/"/\\"/g' )
new_vals=$( echo "$new_vals" | sed 's/"/\\"/g' )

echo "old: /$old_vals/  new: /$new_vals/"

awk -F, '
BEGIN \
{
    num = split("'"$old_vals"'", old_val);
    split("'"$new_vals"'", new_val);
    for (n = 1;n <= num;n++) { replacement[old_val[n]] = new_val[n]; }
}

{
    val = "";
    sep = "";
    for (f = 1;f <= NF;f++) \
    {
        if ($f in replacement) { val = val sep replacement[$f]; } \
        else if ('"$clear_other_fields"') { val = val sep; } \
        else { val = val sep $f; }
        sep = ",";
    }
    print val;
}
'

