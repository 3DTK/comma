#!/bin/bash

name=$( basename $0 )

. /usr/local/bin/aero-test-util

function simple_usage()
{
    echo "Usage: $name [-h|--help] [-i|--input=<file>] <expected-values-file>" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

function usage()
{
    simple_usage
    cat >&2 <<EOF

Verify input against expected values.

By default, input is read from stdin. Input consists of lines in the form "path=value".
Paths may contain array indexes, e.g. abc/def[10]/xyz.

The <expected-values-file> contains one boolean expression per line, referring to the path values.

Examples:

some_value = 5.23
flight/weight = 28000+/-150
abc/def[10]/xyz != "YSSY"
(flight/weight > 3 and last/time matches "2013.*")

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

if [[ $# == 0 ]]; then simple_usage 1; fi

input=
expr_file=

while [[ $# -gt 0 ]]; do
    arg="${1#*=}"
    case "$1" in
        -h|--help)          usage 0;;

        -i=*|--input=*)     input=$arg;;

        -*)                 echo "$name: unrecognized option '$1'" >&2; exit 1;;

        *)                  if [[ -z "$expr_file" ]]; then expr_file=$arg
                            else echo "$name: unexpected argument '$1'" >&2; exit 1; fi;;
    esac
    shift
done

if [[ -z "$expr_file" ]]; then echo "$name: missing required argument <expected-values-file>" >&2; exit 1; fi

tmp_vars="vars.$$"
cat $input | fixm-to-python --assign > "$tmp_vars"

# read one line at a time, since python exits for some kinds of errors

cat "$expr_file" | while read line; do
    ( cat "$tmp_vars"; echo $line | fixm-to-python --test ) | python
done

