#!/bin/bash

function types_incorrect_name { python -c "import comma; point_t = comma.csv.struct( 'x', 'invalid' )"; }
function types_empty_name { python -c "import comma; point_t = comma.csv.struct( 'x', '' )"; }
function types_incorrect_number { python -c "import comma; point_t = comma.csv.struct( 'x,y', 'float64' )"; }
function duplicate_field { python -c "import comma; point_t = comma.csv.struct( 'x,x,z', 'float64', 'int32', 'float64' )"; }
function field_with_slash { python -c "import comma; point_t = comma.csv.struct( 'x,x/y,z', 'float64', 'int32', 'float64' )"; }

function blank_field 
{
    python -c "$( cat <<END
import comma
import numpy
point_t = comma.csv.struct( 'x,,z', 'float64', 'int32', 'float64' )
p = numpy.array( [(1,2,3), (4,5,6)], dtype=point_t )
assert p['x'][0] == 1
assert p['x'][1] == 4
 
assert p['z'][0] == 3
assert p['z'][1] == 6

END
)"
}

function basic
{
    python -c "$( cat <<END
import numpy
import comma

data_t = comma.csv.struct( 'x,id', numpy.float64, numpy.uint32 )
data_t = comma.csv.struct( 'x,id', 'float64', 'uint32' )
data_t = comma.csv.struct( 'x,id', 'f8', 'u4' )
data_t = comma.csv.struct( 't', 'datetime64[us]' )
data_t = comma.csv.struct( 'name', 'S10' )
END
)"
}

function shorthand
{
    python -c "$( cat <<END
import comma

point_t = comma.csv.struct( 'x,y,z', 'float64', 'float64', 'float64' )
timestamped_point_t = comma.csv.struct( 't,coordinates', 'datetime64[us]', point_t )
record_t = comma.csv.struct( 'observer,event', 'S3', timestamped_point_t )
for i,name in enumerate( [ 'event', 'event/coordinates' ] ):
  print "shorthand[{}]/name={}".format( i, name )
  print "shorthand[{}]/value={}".format( i, ','.join( record_t.shorthand[name] ) )
END
)"
}

function leaves
{
    python -c "$( cat <<END
import comma

point_t = comma.csv.struct( 'x,y,z', 'float64', 'float64', 'float64' )
timestamped_point_t = comma.csv.struct( 't,coordinates', 'datetime64[us]', point_t )
observer_t = comma.csv.struct( 'name,id', 'S3', 'uint32' )
record_t = comma.csv.struct( 'observer,event,value', observer_t, timestamped_point_t, 'float64' )
for leaf in record_t.leaves:
  print "leaves/{}={}".format( leaf, record_t.xpath_of_leaf.get( leaf ) )
END
)"
}

function record
{
    local what=$1
    python -c "$( cat <<END
import comma

point_t = comma.csv.struct( 'x,y,z', 'float64', 'float64', 'float64' )
timestamped_point_t = comma.csv.struct( 't,coordinates', 'datetime64[us]', point_t )
record_t = comma.csv.struct( 'observer,event', 'S3', timestamped_point_t )
print ','.join( record_t.$what )
END
)"
}


types_incorrect_name; echo "types_incorrect_name/status=$?"
types_empty_name; echo "types_empty_name/status=$?"
types_incorrect_number; echo "types_incorrect_number/status=$?"

blank_field; echo "blank_field/status=$?"
duplicate_field; echo "duplicate_field/status=$?"
field_with_slash; echo "field_with_slash/status=$?"

basic; echo "status/basic=$?"
shorthand; echo "status/shorthand=$?"

leaves; echo "status/leaves=$?"

for what in fields types; do
    output=$( record $what )
    status=$?
    echo "record/$what/output=$output"
    echo "record/$what/status=$status"
done
