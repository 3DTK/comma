#!/bin/bash

[ -n "$aero_bash_util_include_guard_" ] && return || readonly aero_bash_util_include_guard_=1

# take path-value pairs, assign the values to corresponding bash variables
# in the variable name slashes will be replaced with given delimiter
#
# delimiter: default '_'
# dash '-': replaced with '_'
# lines starting with '#' ignored
# empty lines ignored
#
# $1: variable name prefix
# $2: slash replacement; default: _
#
# examples (try them):
#     aero_path_value_eval < <( echo hello=world )
#     echo $hello
#
#     aero_path_value_eval < <( echo hello/world=bye )
#     echo $hello__world
#
#     aero_path_value_eval blah < <( echo hello/world=bye )
#     echo $blah__hello__world
function aero_path_value_eval()
{
    local prefix=$1
    local path
    local value
    local name
    local delimiter="_"
    if [ ! -z $2 ] ; then delimiter="$2" ; fi
    if [ ! -z $1 ] ; then prefix="$1$delimiter" ; fi
    while IFS='=' read path value ; do
        if [[ "$path" == "" ]] ; then continue ; fi
        if [[ "$path" =~ "#" ]] ; then continue ; fi
        name=$prefix$( echo $path | sed "s/\//$delimiter/g" | sed "s/-/_/g" )
        eval $name=\"$value\"
    done
}

# a coarse elapsed time estimate of <command> execution appended to <file>
# the rationale of writing to a file is to have no side effects for <command>
# usage: aero_elapsed <file> <command> <args>
function aero_elapsed()
{
    local output_file=$1
    local name=$( basename $2 )
    local start=$( date +%s.%N )
    ${@:2}
    local end=$( date +%s.%N )
    local elapsed=$( echo "$end - $start" | bc )
    echo "$name/seconds=$elapsed" >> $output_file
}
