#!/bin/bash

name=$( basename $0 )

qstorage=/mnt/q-storage
airports_bin=navigation/424/20130401T000000/bin

simple_usage()
{
    echo "Usage: $name [-h|--help] [--output-dir=<dir>] [--qstorage=<dir>]" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

usage()
{
    simple_usage
    cat >&2 <<EOF
Creates "extras" files for connections between airports and their recommended navaids.
Note: this script takes about one minute to run.

Options:

    -h|--help           Show this help
    --output-dir        Location of output files (default = current directory)
    --qstorage=         Qstorage directory

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

function bye()
{
    if [[ -z $1 ]] ; then exit 1 ; else exit $1; fi
}

trap 'bye 1' SIGHUP SIGINT SIGTERM SIGPIPE

output_dir="."

while [[ $# -gt 0 ]]; do
    arg="${1#*=}"
    case "$1" in
        -h|--help)          usage 0;;
        --output-dir=*)     output_dir=$arg;;
        --qstorage=*)       qstorage=$arg;;
        -*)                 echo "$name: unrecognized option '$1'" >&2; exit 1;;
        *)                  echo "$name: unexpected argument '$1'" >&2; exit 1;;
    esac
    shift
done

if [[ ! ( -d "$output_dir" && -x "$output_dir" ) ]]; then
    echo "$name: cannot access output directory '$output_dir'" >&2; exit 1
fi

# arguments (floating point): x y
# returns success if x > y
greater_float()
{
    # Note: returning 1 means failure, 0 means success
    return $( echo $1 $2 | awk '{ print ($1 < $2); }' )
}

bin_file="$output_dir/airport-rec-navaid-edges.bin"
json_file="$output_dir/airport-rec-navaid-edges.json"

fields="first/leg/direction,first/point/latitude,first/point/longitude,first/point/id,second/leg/direction,second/point/latitude,second/point/longitude,second/point/id"
format="ub,d,d,s[10],ub,d,d,s[10]"

csv-from-bin-schema $qstorage/$airports_bin airports --all | cut -d, -f4,7 |
while read line; do
    airport=$( echo $line | cut -d, -f1 )
    navaid=$( echo $line | cut -d, -f2 )

    if [[ -z "$airport" || "$airport" == ":" ]]; then continue; fi
    if [[ -z "$navaid" || "$navaid" == ":" ]]; then continue; fi

    airport_pos=$( navigation-lookup $qstorage -c=airports $airport )
    navaid_pos=$( navigation-lookup $qstorage -c=navaids $navaid )

    dist=$( echo $airport_pos,$navaid_pos | sphere-calc distance | cut -d, -f5 )

    if greater_float "$dist" 1.0; then
        echo "$name: suspicious distance $dist between $airport ($airport_pos) and $navaid ($navaid_pos); ignoring" >&2
    else
        # "1" is for first/leg/direction and second/leg/direction
        echo "1,$airport_pos,$airport,1,$navaid_pos,$navaid"
        echo "1,$navaid_pos,$navaid,1,$airport_pos,$airport"
    fi
done | csv-to-bin $format > "$bin_file"

echo "Created $bin_file" >&2

cat <<EOF > "$json_file"
{
    "fields" : "$fields",
    "format" : "$format"
}
EOF
echo "Created $json_file" >&2

bye 0
