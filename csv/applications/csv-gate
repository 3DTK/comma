#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2017 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

source $( type -p comma-application-util )

basename=$( basename $0 )

function options_description()
{
    cat <<EOF
--binary=[<format>]; binary format of input stream
--fields=<fields>; fields of input stream
--format=[<format>]; format of input stream
EOF
}

function operations_description()
{
    cat <<EOF
--exit-if=[<condition>]; exit on first record that matches <condition>
--output-if=[<condition>]; output only records that match <condition>
EOF
}

function usage()
{
    cat <<EOF >&2

cat input.csv | $basename "<control stream>" <operation> [<options>]

gate an input stream based on a control stream

Operations:
EOF
    operations_description | sed 's/^/    /g' >&2
    cat <<EOF >&2

Options:
EOF
    options_description | sed 's/^/    /g' >&2
    cat <<EOF >&2

control stream options:
    fields=<fields>; fields for gate stream
    binary=[<format>]; binary format for gate stream
    format=[<format>]; ascii format for gate stream

EOF
}

(( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) && { usage; exit 0; }
options=$( ( options_description; operations_description ) | comma-options-to-name-value "$@" ; comma_status_ok || exit 1 ) || { echo "$basename: failed to get command line options" >&2; exit 1; }

comma_path_value_to_var --prefix=options <<< "$options"
options_control="$1"
control_options=$(echo $options_control | tr ';' '\n')
comma_path_value_to_var --prefix=control <<< "$control_options"

if [[ -n "$options_binary" && -n "$control_binary" ]]; then
    format_option="--binary"
    options_format=$options_binary
    control_format=$control_binary
elif [[ -n "$options_format" && -n "$control_format" ]]; then
    format_option="--format"
else
    echo "input and gate stream should be both binary or both ascii" >&2
    exit 1
fi

joined_fields="$options_fields,,$(echo $control_fields | csv-fields prefix --path control)"
joined_format="$options_format,ub,$control_format"

[[ -n "$options_exit_if" && -n "$options_output_if" ]] && { echo "expected one of the operations --output-if or --exit-if, got both"; exit 1; }
[[ -z "$options_exit_if" && -z "$options_output_if" ]] && { echo "expected one of the operations --output-if or --exit-if"; exit 1; }

if [[ -n "$options_exit_if" ]]; then operation="--exit-if=$options_exit_if" ; else operation="--output-if=$options_output_if"; fi

csv-repeat --append-fields=repeating --timeout=0.1 --period=0.1 ${options_binary:+--binary=$options_format} |
    csv-time-join --fields $options_fields "$options_control" --realtime ${options_binary:+--binary=$options_format,ub} |
    csv-eval --fields=$joined_fields "$operation" $format_option=$joined_format --flush --full-xpath |
    csv-eval --fields=$(echo $options_fields | csv-fields clear),repeating --output-if="repeating==0" $format_option=$joined_format --flush --full-xpath |
    csv-shuffle -f $options_fields -o $options_fields $format_option=$joined_format --flush
