#!/bin/bash

util="../../../util"
source "$util" || { echo "cannot source '$util'" >&2; exit 1; }

function report_own_tree()
{
    echo "process tree of main:"
    pstree -a -c -g -l -p $main_pid
}

function report_children_names()
{
    tr ' ' ',' \
        | name-value-from-csv --output-line-number ,$1 \
        | sed 's@^@child@'
}

children=()
background_launcher sleep 1 & children+=( $! )
background_launcher sleep 1 & children+=( $! )
background_launcher sleep 1 & children+=( $! )

export main_pid=$BASHPID
echo "main is PID $main_pid" >&2

success_one=( )
for child in ${children[@]} ; do
    verify_background_process_id $main_pid $child
    success_one+=( $? )
done

verify_background_process_ids $main_pid "${children[@]}"
success_all=$?

report_own_tree >&2
pids=$( pgrep -l -P $main_pid ) # do not put into the pipeline
echo "$pids" | report_children_names "name/initial"

(( success == 0 )) && wake_up_listed ${children[@]} || wake_up_and_kill_children $main_pid

report_own_tree >&2
pids=$( pgrep -l -P $main_pid ) # do not put into the pipeline
echo "$pids" | report_children_names "name/final"

echo "waiting for the children to terminate..." >&2
wait

echo "children/verified=$success_all"
for s in ${children[@]} ; do
    echo $s
done \
    | name-value-from-csv --output-line-number pid \
    | sed 's@^@child@;s@"@@g'
for s in ${success_one[@]} ; do
    echo $s
done \
    | name-value-from-csv --output-line-number verified \
    | sed 's@^@status@;s@"@@g'
