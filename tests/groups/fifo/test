#!/bin/bash

scriptname=$( dirname "$0" )

util="../../../pid-fifo-util"
source "$util" || { echo "$scriptname: cannot source '$util'" >&2; exit 1; }

output_dir="output"
mkdir -p "$output_dir" || { echo "$scriptname: cannot create directory '$output_dir'" >&2; exit 1; }

function report_own_tree()
{
    echo "process tree of main:"
    pstree -a -c -g -l -p $main_pid
}

function run_as_group()
{
    local logfile=$1
    local mypid=$BASHPID
    local mypgid brethen
    mypgid=$( ps --no-header -o pgid $mypid )
    mypgid=${mypgid// /}
    brethen=$( pgrep -g $mypgid )
    for brother in $brethen ; do
        ps --no-header -o pid,pgid,comm $brother
    done \
        | sed 's@^ *@@;s@ *$@@;s@  *@,@g' \
        | name-value-from-csv --output-line-number pid,pgid,comm \
        | sed 's@^@process@' > "$logfile"
    sleep 1
}
export -f run_as_group

fifo=$( mktemp --dry-run --tmpdir="$output_dir" )
trap "rm -f $fifo" EXIT
mkfifo "$fifo" || { echo "$scriptname: cannot create a fifo '$fifo'" >&2; exit 1; }

export main_pid=$BASHPID
echo "main is PID $main_pid" >&2

for i in 0 1 ; do
    background_launcher "$fifo" timeout -k 10 -s TERM 20 bash -c run_as_group\ "$output_dir/log${i}" & child=$!
    echo "child[$i]/pid='$child'"
    verify_background_process_id "$fifo" "$child"
    echo "child[$i]/verification/status='$?'"
done

sleep 1
report_own_tree >&2

for i in 0 1 ; do
    cat "$output_dir/log${i}" | sed "s@^@log[$i]/@"
done

echo "waiting for the children to terminate..." >&2
wait
