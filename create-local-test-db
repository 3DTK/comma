#!/bin/bash

name=$( basename $0 )

max_length=63

db_host="localhost"
db_port=3306
db_user="root@localhost"
db_name="qdata"
db_pwd="qdata"
all_db_vars="db_host,db_port,db_user,db_name,db_pwd"

source $( which comma-application-util )
source $( which aero-test-sql-util )

function usage()
{
    cat >&2 <<EOF
Usage: $name [-c|--config=<file>] [-h|--help] [-n|--dry-run] [-t|--tables=<tables file>]

Creates an empty JobQ database. Creates a user, grants it all the necessary permissions.
If '--tables' is given with an earlier no-data dump of the existing JobQ database,
re-create all the tables and procedures as specified in the dump. The database shall
be available for submitting tasks (using 'aero-test-submit --config=<same config file>')
and executing tasks (using 'job-run --config=<same config file>').

Options:

    -h|--help               Show this help
    -c|--config=            Config file (see below for example)
    -n|--dry-run            Do nothing, just show the SQL commands to be issued

Example config file:

db_host=$db_host
db_port=$db_port
db_user=$db_user
db_pwd=$db_pwd
db_name=$db_name

EOF
    exit 0
}

function check_string()
{
    local string=$1
    local length=${#string}
    if [ $length -lt 2 -o $length -gt $max_length ] ;then
        echo "$name: insufficient or excessive string length" >&2
        return 1
    fi
    case "$string" in
        -* ) echo "$name: not ok, string start with hyphen" >&2
             return 1
             ;;    
        *- ) echo "$name: not ok, string end with hyphen" >&2
             return 1
             ;;   
        *[^a-zA-Z0-9-]* ) echo "$name: not ok, string has special character(s)" >&2
             return 1
             ;; 
    esac
    return 0
}

function create_database()
{
    db_name=$1
    check_string "$db_name" || return 1
    echo -n "create database if not exists $db_name;"
}

function create_user()
{
    # grant statement creates the user we are granting some rights to if the user does not exist
    # (as long as the no_auto_create_user is not set).
    local db=$1
    local user=$2
    local passwd=$3
    check_string $db || return 1
    check_string $user || return 1
    echo -n " grant all on ${db}.* to '$user' identified by '$passwd';"
}

config_file=""
dry_run="false"

for arg in "$@"; do
    case $arg in
        -h|--help)      usage; exit 0;;
        -n|--dry-run)   dry_run="true";;
        --config=*)     config_file=${arg#*=};;
        -*)             echo "$name: unrecognised option: $arg" >&2; exit 1;;
        *)              echo "$name: unexpected argument: $arg" >&2; exit 1;;
    esac
done

if [ -n "$config_file" ] ; then sql_read_config "$config_file" "$all_db_vars" || exit 1 ; fi
sql_command=$( sql_get_command )

input=$( create_database "$db_name" && create_user "$db_name" "$db_user" "$db_pwd" )

if [ "$dry_run" == "true" ] ; then
    cat >&2 <<EOF
Will run the command:

    mysql -u root -p --batch --skip-column-names -e "$input"

EOF
else
    echo "need superuser password for running netstat check..."
    sudo netstat -tap | grep -q mysql && { echo "$name: OK, mysql is running" >&2 ; } || { echo "$name: do not see a running mysql server" >&2; exit 1 ; }

    mysql -u root -p --batch --skip-column-names -e "$input"
    if [ $? != 0 ] ; then
        echo "$name: database or user creation failed" >&2
        exit 1
    fi
fi

exit 0
