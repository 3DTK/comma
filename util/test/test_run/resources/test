#!/bin/bash

scriptname=$( basename $0 )

source $( which comma-process-util ) || exit 1
source $( which comma-application-util ) || exit 1

function handle()
{
    [[ -n "$workdir" ]] && rm -rf "$workdir"
}

trap 'handle' EXIT

tarball="../data/resources.tar"
[[ -r "$tarball" ]] || {
    echo "$scriptname: file '$tarball' not found" >&2
    exit 1
}
tarball=$( readlink -f "$tarball" )

export output_dir="output"
mkdir -p "$output_dir" || exit 1
output_dir=$( readlink -f "$output_dir" )

workdir=$( mktemp --directory --tmpdir="$output_dir" )
cd "$workdir"
tar xf "$tarball" || exit 1
cd resources || exit 1

function run_comma_test_run()
{
    comma-test-run --raw --max-memory-main=5000 --max-memory-shared=6000 --max-parallel=10 > "$output_dir/comma-test-run.log"
}
export -f run_comma_test_run

function monitor_users()
{
    local counter max_cpus cpus iter
    local max_iter=$1
    max_cpus=0
    iter=0
    while true ; do
        sleep 1
        counter=$( find . -name resources_counter.json )
        [[ -f "$counter" ]] && {
            cpus=$( cat "$counter" | name-value-get --from json resources/cpus ; comma_status_ok && exit 0 || exit 1 )
            (( $? == 0 )) && {
                (( cpus > max_cpus )) && max_cpus=$cpus
            }
        }
        (( ++iter ))
        (( iter > max_iter )) && break
    done
    echo "cpus/max=$max_cpus"
}
export -f monitor_users

comma_execute_and_wait --group "bash -c monitor_users 25" "bash -c run_comma_test_run"
