#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2014 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name=$( basename $0 )

function simple_usage()
{
    echo "Usage: $name [-h|--help] [-v|--variables=<file>] [--tmp-dir=<dir>] <expected-values-file>" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

function usage()
{
    simple_usage
    cat >&2 <<EOF

Verify input against expected values.

By default, variable values are read from stdin. Input consists of lines in the form "path=value".
Paths may contain array indexes, e.g. abc/def[10]/xyz. Quotes around values are optional (even if
the value contains spaces).

The <expected-values-file> contains one boolean expression per line, referring to the path values.

Examples:

some_value = 5.23
flight/weight > some/other/weight + 28000
abc/def[10]/xyz != "YSSY"

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

if [[ $# == 0 ]]; then simple_usage 1; fi

# check if there are no lines other than comments (and blank lines) in a file
# arguments: <file>
function empty_apart_from_comments()
{
    if egrep -vq '^ *$|^ *#' "$1"; then return 1; fi
}

variables=
expr_file=
tmp_dir=.

while [[ $# -gt 0 ]]; do
    arg="${1#*=}"
    case "$1" in
        -h|--help)          usage 0;;
        -v=*|--variables=*) variables=$arg;;
        --tmp-dir=*)        tmp_dir=$arg;;
        -*)                 echo "$name: unrecognized option '$1'" >&2; exit 1;;
        *)                  if [[ -z "$expr_file" ]]; then expr_file=$arg
                            else echo "$name: unexpected argument '$1'" >&2; exit 1; fi;;
    esac
    shift
done

if [[ -z "$expr_file" ]]; then echo "$name: missing required argument <expected-values-file>" >&2; exit 1; fi

if [[ ! ( -d "$tmp_dir" && -w "$tmp_dir" ) ]]; then
    if [[ -d "$TMPDIR" && -w "$TMPDIR" ]]; then tmp_dir=$TMPDIR
    else echo "$name: cannot access temporary directory '$tmp_dir' or \$TMPDIR '$TMPDIR'; please set --tmp-dir to another directory" >&2; exit 1
    fi
fi

# if the variables file name is known, pass it to name-value-eval, since it can appear in some error messages
if [[ -z "$variables" ]]; then
    input="$( cat )"
    if [[ -z "$input" ]]; then
        if empty_apart_from_comments "$expr_file"; then exit 1  # no variables means it is OK for the input to be empty
        else echo "$name: error: empty input (test script failed?)" >&2; exit 1; fi
    fi
    echo "$input" | name-value-eval --test "$expr_file" --tmp-dir=$tmp_dir
else
    if [[ ! -f "$variables" || ! -s "$variables" ]]; then
        echo "$name: error: empty or non-existent input file '$variables' (test script failed?)" >&2; exit 1
    fi
    name-value-eval --test "$expr_file" --variables="$variables" --tmp-dir=$tmp_dir
fi

