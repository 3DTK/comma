# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script is designed to be included in another script directly, for example:
# source $( which comma-env )

[[ -n "$comma_env_include_guard_" ]] && return
readonly comma_env_include_guard_=1

# Run commands in a minimal environment.
#
# Usage:
#
# To run <your-command> with the given arguments in a clean environment with
# the minimal number of variables inherited from the parent environment:
#   comma_env --default your-command arg1 arg2 ...
#
# To list the default variables to be imported and return:
#   comma_env --default-imports
#
# To run <your-command> with the provided arguments in the shell environment that
# inherit the default and the explicitly listed variables from the parent environment:
#   comma_env --import=FOO,BAR,LICENSE,MYENV your-command arg1 arg2 ...
#
# The options of comma_env must be given first. It does not search for them in the
# entire command line, assuming options in other positions belong to <your-command>.
#
# Variables shall be given as a comma-separated list. Both --import=<list> and
# --import <list> forms are supported. If a variable is not set in the parent
# environment, it is not set. Set a variable to an empty string if it shall be present.
# All the default and user-specified variables are exported.
#
# To see the resulting environment without running any commands in it, give '-'
# (a single minus character) as <your-command>.
#
# If you need to call (or use) a bash function, add it to the --import list, such
# as in:
#   function foo(){ ls --reverse; }
#   comma_env --import=foo foo
#
# All the listed functions are "export -f"-ed.
#
# Exit status of comma_env is defined by env (1). See "info coreutils 'env invocation'"
# for details.
function comma_env()
{
    local comma_env_show_help="false"
    (( $# == 0 )) && comma_env_show_help="true"
    [[ "$1" == "--help" ]] && comma_env_show_help="true"
    [[ "$comma_env_show_help" == "true" ]] && {
    cat >&2 <<EOF
Usage:
    comma_env --import=<list,of,variable,names> your-command arg1 arg2
    comma_env --import <list,of,variable,names> your-command arg1 arg2
    comma_env --default your-command arg1 arg1
    comma_env --default-imports
    comma_env --help
EOF
    return $(( $# == 0 ))
    }

    local comma_env_default_list="HOME,HOSTNAME,LANG,LANGUAGE,LD_LIBRARY_PATH,LOGNAME,USER" # PATH handled separately
    [[ "$1" == "--default-imports" ]] && { echo "$comma_env_default_list,PATH" ; return 0 ; }

    local comma_env_variables_list=$comma_env_default_list
    case "$1" in
        --import)    shift ; comma_env_variables_list="$comma_env_default_list,$1" ; shift ;;
        --import=*)  comma_env_variables_list="$comma_env_default_list,${1#*=}" ; shift ;;
        --default)   shift ;;
        *)           echo "comma_env: first argument must be '--import' or '--default', not '$1'" >&2 ; return 1 ;;
    esac

    # remove possible repetitions
    comma_env_variables_list=$( echo "$comma_env_variables_list" | tr ',' '\n' | sort -u )
    comma_env_variables_list=$( echo $comma_env_variables_list )  # convert newlines to spaces

    # work in a subshell to use a custom EXIT trap
    (
        comma_env_temp_file=$( mktemp --dry-run -t comma-env.XXXXXXXX )
        trap "rm -f \"$comma_env_temp_file\"" EXIT
        local comma_env_command_to_execute=""
        [[ "$*" == "-" ]] && { comma_env_command_to_execute="set" ; shift ; }
        local comma_env_variable_name
        for comma_env_variable_name in $comma_env_variables_list ; do
            if type "$comma_env_variable_name" 2>/dev/null | head -n 1 | grep -q "is a function" ; then
                type "$comma_env_variable_name" | tail -n +2 >> "$comma_env_temp_file"
                echo "export -f $comma_env_variable_name" >> "$comma_env_temp_file"
            else
                [[ -v $comma_env_variable_name ]] && echo "export $comma_env_variable_name=\"$( eval echo \$$comma_env_variable_name )\"" >> "$comma_env_temp_file"
            fi
        done
        # handle PATH explicitly
        env -i PATH="$PATH" comma-env-detail "$comma_env_temp_file" $comma_env_command_to_execute $@ # do not quote the second argument to helper
    )
}
export -f comma_env
