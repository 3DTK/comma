#!/bin/bash

#   This file is intended to store common and generic functions used by other scripts accessing
#   the JobQ database
#
#   To include these functions and use them in your script, use the following command:
#
#   source ./aero-test-sql-util


# fetch database-related arguments from a provided configuration file
# arguments: <config filename> [variable list [verbose]]
# second argument lists comma-separated names of the variables to import from the config
# default arguments: db_host,db_port,db_user,db_pwd,db_name; may explicitly set arguments
# to '' to force using the defaults
# verbose run if non-empty third argument given
function sql_read_config()
{
    local config=$1
    local args=$2
    local verbose=$3

    if [ -z "$args" ] ; then
        args="db_host,db_port,db_user,db_pwd,db_name"
    fi

    if [ -z "$name" ] ; then
        local name=$( basename $0 )
    fi

    type log_error 2>&1 | grep -q 'function' || {
        [[ -n "$verbose" ]] && echo "$name: log_error is not a shell function, default to 'echo >&2'" >&2
        function log_error()
        {
            echo "$name: $@" >&2
        }
    }
    type debug_msg 2>&1 | grep -q 'function' || {
        [[ -n "$verbose" ]] && echo "$name: debug_msg is not a shell function, default to 'echo >&2'" >&2
        function debug_msg()
        {
            [[ -n "$verbose" ]] && echo "$name: $@" >&2
        }
    }

    if [[ ! -f "$config" ]]; then log_error "Could not open config file '$config'"; return 1; fi
    debug_msg "reading config '$config'"

    type comma_path_value_to_var 2>&1 | grep -q 'function' || {
        log_error "comma_path_value_to_var unknown, forgot to source?"; return 1;
    }
    comma_path_value_to_var < <( cat "$config" | egrep "${args//,/|}" )
    if [ $? != 0 ] ; then
        log_error "Error reading configuration from '$config'"; return 1;
    fi
    if [ -n "$verbose" ] ; then
        local arg
        for arg in ${args//,/ } ; do
            eval "echo $arg=\$$arg"
        done
    fi
}

# A convenience function wrapping all parameters into mysql command; compared
# to using the same string directly provides delayed evaluation of the variables
function sql_get_command()
{
    echo "mysql -h $db_host -P $db_port -u $db_user -p$db_pwd $db_name -e "
}
