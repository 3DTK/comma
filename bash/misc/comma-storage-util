#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script provides miscellaneous bash functions that do not fall under
# more clearly defined categories

# this script is designed to be included in another script directly, for example:
# source $( which comma-storage-util )

[[ -n "$comma_storage_util_include_guard_" ]] && return
readonly comma_storage_util_include_guard_=1

# Auxiliary function to convert various storage units to bytes.
# Search for regular expressions [0-9]+unit (where space-separation is optional
# and unit is one of kB, MB, GB, and TB) and replaces these substrings with
# corresponding quantities in bytes.
function comma_storage_to_bytes()
{
    local line
    local storage_regex='([0-9]+)( *)([kMGT]B)'
    while true ; do
        read line
        [[ -z "$line" ]] && break
        while true ; do
            # replace storage expressions one-by-one from the left until none found
            if [[ "$line" =~ $storage_regex ]] ; then
                case ${BASH_REMATCH[3]} in
                    kB) value=$(( ${BASH_REMATCH[1]} * 1024 ));;
                    MB) value=$(( ${BASH_REMATCH[1]} * 1024 * 1024 ));;
                    GB) value=$(( ${BASH_REMATCH[1]} * 1024 * 1024 * 1024 ));;
                    TB) value=$(( ${BASH_REMATCH[1]} * 1024 * 1024 * 1024 * 1024 ));;
                esac
                line="${line/${BASH_REMATCH[1]}${BASH_REMATCH[2]}${BASH_REMATCH[3]}/$value}"
            else
                echo "$line"
                break
            fi
        done
    done
}
export -f comma_storage_to_bytes

# Auxiliary function opposite to comma_storage_to_bytes.
# Round-trip conversion to-from-bytes (or from-to) does not produce identical output.
function comma_storage_to_human_readable()
{
    local line path value suffix
    local numeric_regex='^[0-9]+$'
    while read line ; do
        [[ $line != *memory* ]] && { echo "$line"; continue; }
        suffix=""
        value=${line#*=}
        if [[ "$value" =~ $numeric_regex ]] ; then
            (( value > 10 * 1024 )) && { value=$(( value / 1024 )); suffix=" kB"; }
            (( value > 10 * 1024 )) && { value=$(( value / 1024 )); suffix=" MB"; }
            (( value > 10 * 1024 )) && { value=$(( value / 1024 )); suffix=" GB"; }
            path=${line%%=*}
            echo "$path=${value}${suffix}"
        else
            echo "$line"
        fi
    done
}
export -f comma_storage_to_human_readable
