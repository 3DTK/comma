#!/bin/bash

scriptname=$( basename "$0" )

source $( which comma-background-util ) || { echo "$scriptname: cannot source 'comma-background-util'" >&2; exit 1; }

output_dir="output"
temp_dir="$output_dir/temp"

rm -rf "$temp_dir" || exit 1
mkdir -p "$temp_dir" || { echo "$scriptname: cannot create directory '$temp_dir'" >&2; exit 1; }
fifo="$temp_dir/pipe"
trap "rm -f \"$fifo\"" EXIT
mkfifo "$fifo" || { echo "$scriptname: cannot create named pipe '$fifo'" >&2; exit 1; }

function handler()
{
    echo "handler/signal=$1"
    trap - INT HUP TERM PIPE USR1
    pkill -P $BASHPID
    wait
    kill -s $1 $BASHPID
}
export -f handler

function runme()
{
    trap 'handler TERM' TERM
    trap 'handler INT'  INT
    trap 'handler HUP'  HUP
    trap 'handler PIPE' PIPE
    trap 'handler USR1' USR1
    sleep 100 &
    wait
}
export -f runme

function toplevel()
{
    local verbosity=$1
    local verbose=
    [[ "$verbosity" == "verbose" ]] && verbose="--verbose"
    local signal=$2
    [[ "$signal" == "TERM" ]] && signal="" || signal="--signal=$signal"
    comma_background_and_verify_pid $verbose "$fifo" bash -c runme || { echo "$scriptname: fatal system error, wrong background PID" >&2; exit 1; }
    background_pid=$!

    sleep 10 # to allow exec to proceed

    comma_kill_signed $verbose $signal "$background_pid" "$comma_background_signature"
    echo "comma_kill_signed/status=$?"

    wait $background_pid
    echo "background/status=$?"
}

echo "sigterm/status=$(( 128 + $( kill -l TERM ) ))"
echo "sigusr1/status=$(( 128 + $( kill -l USR1 ) ))"

for verbosity in "quiet" "verbose" ; do
    for signal in "TERM" "USR1" ; do
        toplevel "$verbosity" "$signal" | sed "s@^@$verbosity/$signal/@"
    done
done
