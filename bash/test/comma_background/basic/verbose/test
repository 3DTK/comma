#!/bin/bash

readonly scriptname=$( basename "$0" )

util="comma-background-util"
source $( which "$util" ) || { echo "$scriptname: cannot source '$util'" >&2; exit 1; }

main_pid=$BASHPID
echo "$scriptname: running as PID $main_pid" >&2

function report_own_tree()
{
    echo "$scriptname: process tree of main:"
    pstree -a -c -g -l -p $main_pid
}

fifo=$( mktemp --dry-run )
trap "rm -f '$fifo'" EXIT
mkfifo "$fifo" || { echo "$scriptname: cannot create FIFO '$fifo'" >&2; exit 1; }
echo "$scriptname: use fifo '$fifo'" >&2

for verbosity in "verbose" "mute" ; do
    echo "verbosity='$verbosity'" >&2
    verbose=""
    [[ "$verbosity" == "verbose" ]] && verbose="--verbose"
    # first, use implementation functions explicitly
    builtin echo "$scriptname: attempt to start a background process..." >&2
    comma_process_launch $verbose "$fifo" sleep 1 & last_child=$!
    echo "$verbosity/child[0]/pid=$last_child"
    builtin echo "$scriptname: launched background child '$last_child', now verify..." >&2
    comma_verify_background_pid $verbose "$fifo" $last_child
    echo "$verbosity/child[0]/verification/status=$?"
    # then, use a wrapper
    comma_process_launch_and_validate $verbose "$fifo" sleep 1
    echo "$verbosity/child[1]/verification/status=$?"
    echo "$verbosity/child[1]/pid=$!"
    report_own_tree >&2
done

echo "waiting for the children to terminate..." >&2
wait

# the older version treated first argument as file name; watch for '--verbose' files
ls -p | grep -v '/' | sort | name-value-from-csv --output-line-number name | sed 's@^@file@'
