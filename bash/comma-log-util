#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script is designed to be included in another script directly, for example:
# source $( type -p comma-application-util )

[[ -n "$comma_log_util_include_guard_" ]] && return 0
readonly comma_log_util_include_guard_=1

# usage: comma_stacktrace <any message>
# print the stacktrace, the list of lines and script names that were passed
# through on the way to the currently executed line of the script
# finally prints the supplied arguments, if any
function comma_stacktrace()
{
    local -i frame=0
    while caller $frame; do
        ((++frame));
    done

    (( $# == 0 )) && return
    echo "$*"
}
export -f comma_stacktrace

# A function to log error to stderr with a code and highlighting
# 
# Example
#   comma_log_error comma-log-util 'Deflector Dish Misaligned.'
#   comma_log_error comma-log-util --timestamp 'Deflector Dish Misaligned.'
function comma_log_error() { local -r app="$1" ; shift ; comma_log_message "$app" Error $@ ; }
# A function to log warnings to stderr with a code and highlighting
function comma_log_warn()  { local -r app="$1" ; shift ; comma_log_message "$app" Warning $@ ; }
# A function to log warnings to stderr with a code and highlighting
function comma_log_note()  { local -r app="$1" ; shift ; comma_log_message "$app" Notice $@ ; }

export -f comma_log_error comma_log_warn comma_log_note
readonly -f comma_log_error comma_log_warn comma_log_note

# A function to log a message to stderr in a well defined format
#
# Usage
#   comma_log_message <application> <message_type> [--timestamp] <text>
#
# Example
#   comma_log_message comma-log-util Error bird
#   # outputs 'comma-log-util: Error: bird'
#   comma_log_message comma-log-util Error --timestamp bird
#   # outputs '(20140101000000),comma-log-util: Error: bird'
function comma_log_message()
{
    local -r app="$1" code="$2"
    shift 2 
    local now=''
    if [[ "$1" == '--timestamp' ]] ; then
        now="($( date --utc '+%Y%m%d%H%M%SZ' )),"
        shift
    fi
    echo -e "${now}${app}: ${code}: $*" >&2
}
export -f comma_log_message
readonly -f comma_log_message

