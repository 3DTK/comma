#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

## @page comma-application-util comma-application-util
# this script is designed to be included in another script directly, for example:
# @code
# source $( type -p comma-application-util )
# @endcode
#
# @section comma_application_util_functions Functions
# @li @link comma_options_from_name_value @endlink
# @li @link comma_options_has @endlink
# @li @link comma_options_help @endlink

[[ -n "$comma_application_util_include_guard_" ]] && return 0
readonly comma_application_util_include_guard_=1

source $( type -p comma-name-value-util ) \
    || { echo "$name: cannot source 'comma-name-value-util' from '$BASH_SOURCE'" >&2; exit 1; }

## @page comma_options_from_name_value comma_options_from_name_value
# @section comma_options_from_name_value
# @description convert path-value pairs to bash variables
# @param some param doing something
# usage: my_options=( $( cat name-value-pairs | comma_options_from_name_value [<options>] ) )
#
# options
#     --use-equal-sign: options set as --file=foo.txt; default --file foo.txt
#
# todo: there still may be trouble with option values with spaces inside; check and test it... later...
#
# example (try it)
#      echo -e hello=\"\\\"world\\\"\"\\nverbose=\"true\" | comma_options_from_path_value
function comma_options_from_name_value()
{
    local delimiter='\n'
    if [[ "$1" == "--use-equal-sign" ]] ; then delimiter='=' ; fi
    sed 's/^/--/g' \
        | sed 's/="true"$//g' \
        | sed 's/="false"$//g' \
        | sed 's/="/=/g' \
        | sed 's/"$//g' \
        | sed 's/\\"/"/g' \
        | tr '=' "$delimiter"
}
export -f comma_options_from_name_value

## @page comma_options_has comma_options_has
# @description outputs 0, if field is present in the output, 0, if it is not
# @param field_name
# usage: comma_options_has <what> $@
# example:
#     if (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) ; then usage ; fi
function comma_options_has()
{
    for a in ${@:2} ; do if [[ "$1" == "$a" || "$a" =~ ${1}= ]] ; then echo 1 ; exit ; fi ; done
    echo 0
}
export -f comma_options_has

## @page comma_options_help comma_options_help
# @description convenience function, returns 1, if --help or -h is present; 0 otherwise
# usage: comma_options_help $@ && usage
function comma_options_help() { return $(( ! ( $( comma_options_has '--help' $@ ) || $( comma_options_has '-h' $@ ) ) )) ; }
export -f comma_options_help

## @page comma_options_names comma_options_names
# @description converts a standard comma description to a list of names
# 
# example
#   description | comma_options_names
function comma_options_names()
{
    sed -e '/^$/d' -e '/^[^-]/d' -e 's/=.*//g' -e 's/;.*//g' -e 's/,/\n/g'
}
export -f comma_options_names

## @page comma_options_to_bash_completion comma_options_to_bash_completion
# @description converts a standard comma description to input
# for the comma bash completion function
# 
# example
#   description | comma_options_to_bash_completion
function comma_options_to_bash_completion()
{
    comma_options_names | sort
}
export -f comma_options_to_bash_completion

## @page comma_options_select comma_options_select
# @description after a set of options have been retrieved as paths convert to
# options format for a child script
# 
# example
#   comma-test-run $( comma-test-run --description | comma-options-to-name-value $@ | comma_name_value_to_options )
function comma_name_value_to_options()
{
    sed -e '/=/ ! d' -e '/^"/d' -e 's/^/--/g'| tr '\n' ' '
}
export -f comma_name_value_to_options

# verify the overall exit status of a pipeline ($? reports only the status of the last step
# in a pipeline); ignore termination by SIGPIPE
#
# rationale for ignoring SIGPIPE: if in a pipeline " A | B " the process "B" may exit before A,
# so that A (pipe writer) has no reader, then A is killed by SIGPIPE and has non-zero exit status
# however, this may be (and likely is) not an error overall, as B has simply finished
# processing and terminated
#
# example
# A | B | C | D
# if ! status_ok ; then echo "failed"; else echo "ok"; fi

# define this value once to avoid calling subprocesses inside status_ok
comma_sigpipe_exit_status_=$( expr 128 \+ $( kill -l SIGPIPE ) )
export comma_sigpipe_exit_status_

function comma_status_ok()
{
    pipestatus_copy_status_ok=("${PIPESTATUS[@]}")  # make a safe copy
    local outcome_status_ok=""
    
    # if a pipetstus vector is passed to us, then use this instead
    if [[ $# -gt 0 ]]; then
        for outcome_status_ok in $@ ; do
            if ! (( outcome_status_ok == 0 || outcome_status_ok == comma_sigpipe_exit_status_ )) ; then
                #comma_log_note comma-application-util --timestamp "comma_status_ok: a pipe's status was not good ( ${pipestatus_copy_status_ok[@]} ); called from '$( caller 0 )'"
                return 1
            fi
        done
    else
        for outcome_status_ok in "${pipestatus_copy_status_ok[@]}" ; do
            if ! (( outcome_status_ok == 0 || outcome_status_ok == comma_sigpipe_exit_status_ )) ; then
                #comma_log_note comma-application-util --timestamp "comma_status_ok: a pipe's status was not good ( ${pipestatus_copy_status_ok[@]} ); called from '$( caller 0 )'"
                return 1
            fi
        done
    fi
    return 0
}
export -f comma_status_ok
