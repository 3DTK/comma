#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script provides functions for interprocess syncronisation in bash

# this script is designed to be included in another script directly, for example:
# source $( type -p comma-sync-util )

# Note: internally, these functions uses file descriptor 8. Avoid re-using it
# in code that invokes (or is invoked under) any of the following functions.

[[ -n "$comma_sync_util_include_guard_" ]] && return 0
readonly comma_sync_util_include_guard_=1

# General synchronization function. Takes on input a lock file name to be used
# in a flock call (this file will be truncated to zero size) and the command to be
# executed with all the arguments. Example:
#
#     comma_locked /tmp/mylock myfcn --option1 "$value1" "$arg1" ...
#
# If the file doesn't exist it will be created. It is not removed on completion.
#
# Note: do not re-direct output of the function being protected. Do all writes
# within a function while it is protected by the serialization lock.

function comma_locked()
{
    local lock=$1
    shift
    (
        flock -x 8
        $@
    ) 8>"$lock"
}
export -f comma_locked


# Attempt to lock a file.
#
#     comma_lock_file [options] /tmp/mylock
#
# Options:
#     --no-wait: exit immediately if file can't be locked.
#
# If locked, the lock is held until the calling process terminates or it is
# explicitly unlocked.

function comma_lock_file()
{
    local flock_arg="-x"
    local lock

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --no-wait) flock_arg="-n" ;;
            -*)        echo "comma_lock_file: unrecognised option $1" >&2; exit 1 ;;
            *)         lock=$1 ;;
        esac
        shift
    done

    exec 8>$lock
    flock $flock_arg 8
}


# comma_set_exit_function exit_function [args]
#
# register exit_function to call on exit of main script
#
# The two step calling sequence is to ensure that the exit_function is
# completely detached from the script, so that it is not terminated when the
# script terminates.

export comma_set_exit_function_verbose=0

function _comma_set_exit_function_debug()
{
    (( comma_set_exit_function_verbose )) && echo "$*" >&2
}
export -f _comma_set_exit_function_debug

function _comma_set_exit_function_grandchild()
{
    local lock=$1
    shift

    # wait until the main process has grabbed the lock
    local timeout=30
    while (( timeout-- )) ; do
        [[ -s "$lock" ]] && break
        _comma_set_exit_function_debug "comma_set_exit_function_grandchild: waiting for $lock (size $( wc -c < $lock ))"
        sleep 1
    done
    (( timeout == 0 )) && {
        echo "comma_set_exit_function_grandchild: timeout while waiting for $lock"
        exit 1
    }
    _comma_set_exit_function_debug "comma_set_exit_function_grandchild: trying to lock $lock (size $( wc -c < $lock ))"
    comma_locked "$lock" $@
    rm -f "$lock"
    _comma_set_exit_function_debug "comma_set_exit_function_grandchild: terminated"
}
export -f _comma_set_exit_function_grandchild

function _comma_set_exit_function_child()
{
    local lock=$1
    shift

    _comma_set_exit_function_debug "comma_set_exit_function_child ($@) (pid $BASHPID) starting..."
    setsid bash -c '${0} ${1+"$@"}' _comma_set_exit_function_grandchild $lock $@ &
    _comma_set_exit_function_debug "comma_set_exit_function_child...done"
}

function comma_set_exit_function()
{
    local lock=$( mktemp --tmpdir comma_set_exit_function.lock.XXXX )
    _comma_set_exit_function_debug "comma_set_exit_function ($@) using lock '$lock'"
    _comma_set_exit_function_debug "comma_set_exit_function - spawning child"
    _comma_set_exit_function_child $lock $@ & wait $!
    _comma_set_exit_function_debug "comma_set_exit_function - locking $lock"
    comma_lock_file --no-wait $lock
    (( $? == 0 )) || {
        echo "comma_set_exit_function: unable to acquire lock file $lockfile"
        exit 1
    }
    _comma_set_exit_function_debug "comma_set_exit_function - locked $lock"
    # signal the grandchild that the lock has been acquired
    echo "1" >> "$lock"
    _comma_set_exit_function_debug "comma_set_exit_function - exiting"
    return 0
}
