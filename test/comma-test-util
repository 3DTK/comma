#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

[[ -n "$comma_test_util_include_guard_" ]] && return 0 | readonly comma_test_util_include_guard_=1

function comma_test_util_run_tarball_cleanup()
{
    trap '' SIGINT SIGHUP SIGTERM SIGPIPE SIGQUIT
    [[ -n "$1" ]] && rm -rf "$1"
}

# A function to extract a test from a tar format archive and run it under comma test run.
# Examples:
#   comma_test_util_run_tarball '../data/timeout.tar' "--junit=$outdir/junit.xml"
#   comma_test_util_run_tarball '../data/path.tar' "--path=$datadir"
# Output
#    status=<integer return code>
#    output_directory="output/directory_name"
function comma_test_util_run_tarball()
{
    local tarball="$1"
    [[ -n "$tarball" ]] || { echo "comma_test_util_run_tarball: Error: No tarball given" >&2 ; return 1; }
    [[ -r "$tarball" ]] || { echo "comma_test_util_run_tarball: Error: Given tarball could not be read '$tarball'" >&2 ; return 1; }
    shift

    local tarfull workname workdir rv
    tarfull="$( readlink -f "$tarball" )"
    workname="${tarfull////_}"

    workdir="$( mktemp --directory --tmpdir "$workname.XXXXXX" || exit 1 )" \
        || { echo "comma_test_util_run_tarball: Error: Could not create temporary '$workname.XXXXXX'" >&2 ; return 1; }
    trap "comma_test_util_run_tarball_cleanup $workdir" SIGINT SIGHUP SIGTERM SIGPIPE SIGQUIT EXIT
    echo "comma_test_util_run_tarball: Info: Working Directory is '$workdir'" >&2
    (
        cd "$workdir" || { echo "comma_test_util_run_tarball: Error: Unable to enter working directory '$workdir'" >&2 ; return 1; }
        tar xf "$tarfull" || { echo "comma_test_util_run_tarball: Error: Could not extract tarball '$tarfull'" >&2 ; return 1; }
        echo "comma_test_util_run_tarball: Info: Run comma-test-run --raw $@" >&2
        comma-test-run --raw $@ >&2 ; rv=$?
        echo "status=$rv"
    )
    
    find "$workdir" '(' -name input -o -name test -o -name expected ')' -exec mv -v '{}' '{}.executed' ';' >&2 || { echo "comma_test_util_run_tarball: Error: Unable to rename input and test files under '$workdir'" >&2 ; return 1; }
    cp -v "$workdir" "output" >&2 || { echo "comma_test_util_run_tarball: Error: Unable to move '$workdir' to output" >&2 ; return 1; }
    echo "output_directory=\"output/$( basename $workdir )\""
    
    return $rv
}

