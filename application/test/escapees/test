#!/bin/bash

name=$( basename $0 )

# Test idea: create several child processes that spawn a large number
# of grand-children. Leave these processes waiting so that on a special
# event (reading from a fifo pipe) they start spawining more and more
# grandchildren. Set up a signal handler in the main script to kill all
# its offspring recursively (the default in comma_trap). Then trigger
# the spawning event (write into the pipes) and immediately after that
# send a kill signal to the top-level (this) script. Grandchildren shall
# sleep for some time, then report termination. No termination will be
# reported for grandchildren killed prematurely. Thus, any termination
# report indicates escapees.

source $( which comma-application-util ) || exit 1

function clean_up()
{
    trap '' SIGHUP SIGINT SIGTERM SIGPIPE SIGQUIT   # ignore signals
    echo "terminated, clean up in $name..." >&2
    rm -rf "$output"
    wait $child_pids
    echo "do not touch for $bed_time s..." >&2
}

# handle signals (clean up and exit)
comma_trap clean_up SIGHUP SIGINT SIGTERM SIGPIPE SIGQUIT --name=$name

function grandchild()
{
    local parent=$1
    local stage=$2
    local delay=$3
    sleep $delay
    echo "Bug? $stage grandchild of parent $parent terminated" >&2
}

function child()
{
    local rank=$1    # our worker number
    local num=$2     # number of grandchildren to spawn
    local pipe=$3    # wait for the command on this fifo
    local delay=$4   # time for offspring to sleep
    local ip cmd pids
    # first spawn
    for ip in $( seq $num ) ; do
        grandchild $rank "early" $delay &
        pids="$pids $!"
    done
    read cmd < $pipe
    [[ "$cmd" == "true" ]] && {
        # second spawn
        for ip in $( seq $num ) ; do
            grandchild $rank "late" $delay &
            pids="$pids $!"
        done
    }
    wait $pids
    echo "child $rank terminated" >&2
    return 0
}

# Fine-tune these parameters
num_children=8
num_larvae=1024
bed_time=4
spawn_trigger="true"
do_kill="true"
trigger_delay=2

child_pids=""
pipes=""
output=$( mktemp -d )

# create children
for n in $( seq $num_children ) ; do
    pipe="$output/pipe${n}"
    pipes="$pipes $pipe"
    mkfifo "$pipe" || exit 1
    child $n $num_larvae $pipe $bed_time &
    child_pids="$child_pids $!"
done

# let the grandchildren goto sleep
sleep $trigger_delay

# optionally trigger second spawning
for pipe in $pipes ; do
    echo "$spawn_trigger" > "$pipe"
done

[[ "$do_kill" == "true" ]] && kill -s INT $BASHPID

wait $child_pids
rm -rf "$output"
echo "normal exit" >&2
