#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# this script is designed to be included in another script directly, for example:
# source $( which comma-application-util )

[[ -n "$comma_application_util_include_guard_" ]] && return
readonly comma_application_util_include_guard_=1

# usage: get_children [<pid>] [--recursive]
# output the process ids of all children of a process (space separated); by default, just direct children,
# not descendants
# options:
#   <pid = positive integer>    Target process (only one allowed) (default = current process)
#   --recursive                 Get all descendants, not just immediate children
function get_children()
{
    local is_recursive=0
    local target_pid=$BASHPID   # using $BASHPID instead of $$ handles subshells properly (e.g backgrounded functions)

    while [[ $# -ne 0 ]]; do
        case $1 in
            --recursive) is_recursive=1;;
            -*)          echo "$0: get_children(): unknown option '$1'" >&2; return 1;;
            *)           target_pid=$1;;
        esac
        shift
    done

    if (( is_recursive )); then
        ps -eo ppid:1,pid:1 | gawk '
            { child[$1, ++num_children[$1]] = $2; }
            # idosyncracy of gawk: local function variables must be defined as (unused) function arguments
            function print_children(parent, local_n) \
            {
                for (local_n = 1;local_n <= num_children[parent];local_n++)
                {
                    printf "%s%s", separator, child[parent, local_n];
                    separator = " ";
                    print_children(child[parent, local_n]);
                }
            }
            END { print_children('"$target_pid"'); printf "\n"; }'
    else
        ps -eo ppid:1,pid:1 | grep "^$target_pid " | cut -f2 -d' ' | tr '\n' ' ' | sed 's/ $//g'
        echo   # add final newline
    fi
}
export -f get_children

# usage: stacktrace <any message>
# print the stacktrace, the list of lines and script names that were passed
# through on the way to the currently executed line of the script
# finally prints the supplied arguments, if any
function stacktrace()
{
    local frame=0

    while caller $frame; do
        ((frame++));
    done

    echo "$*"
}
export -f stacktrace

# usage: kill_children [<pid>] [--recursive] [-<"kill" options> ...]
# kill all children of a process
# options:
#   <pid = positive integer>    Process to kill (only one allowed) (default = current process)
#   -<"kill" option ...>        Options to pass to the "kill" command (e.g. -SIGUSR1 or -9)
#   --recursive                 Kills all descendants, not just immediate children
function kill_children()
{
    local recursive_option=
    local kill_options=()
    local target_pid=$BASHPID   # using $BASHPID instead of $$ handles subshells properly (e.g backgrounded functions)

    while [[ $# -ne 0 ]]; do
        case $1 in
            --recursive) recursive_option="--recursive";;
            -*)          kill_options+=( $1 );;
            *)           target_pid=$1;;
        esac
        shift
    done

    local child_pids=$( get_children $recursive_option $target_pid )
    kill ${kill_options[@]} $child_pids 2> /dev/null
}
export -f kill_children

# usage: comma_trap [<"cleanup" command>] [<signal list> ...] [--exit[=]<exit code>] [--kill-children|--no-kill-children|--kill-recursive] (default = --kill-recursive)
# Trap termination signals.
# Order of arguments does not matter; arguments starting with "SIG" are assumed to be signal names.
# If no signals are listed, SIGTERM (the default "kill" signal) and SIGINT (control-C) are implied,
# otherwise all signals must be specified explicitly.
#
# The optional "cleanup" command should perform any necessary cleanup for the script, but should not call "exit"
# (exit is automatic).
# The default exit code is 1; use option --exit to set the code (doesn't work for SIGINT).
# The variable $SIGNAL_NAME may be used in the cleanup command (the name of the signal caught),
# but be sure to use single quotes in this case.
#
# Examples:
#
# comma_trap
# comma_trap --exit 3
# comma_trap 'echo Killed' SIGTERM SIGINT SIGQUIT --kill-children
# comma_trap SIGTERM SIGINT SIGQUIT SIGHUP
# comma_trap SIGINT 'echo Cleaning up; rm -f $tmp_dir'
# comma_trap do_cleanup SIGTERM
#
function comma_trap()
{
    local cleanup_command=""
    local signal_list=()
    local kill_option="--kill-recursive"
    local exit_code=1
    local script_name=""
    local original_args="$*"
    while [[ $# -ne 0 ]]; do
        case $1 in
            SIG*)     signal_list+=( $1 );;
            INT|TERM) echo "comma_trap: signal names must start with 'SIG' (found '$1') (called: comma_trap $original_args)" >&2; return 1;;
            --kill-children|--kill-recursive) kill_option=$1;;
            --no-kill-children)               kill_option="";;
            --exit=*)                         exit_code=${1#*=};;
            --exit)                           shift; exit_code=$1;;
            --name=*)                         script_name=${1#*=};;
            -*) echo "comma_trap: unknown option '$1' (called: comma_trap $original_args)" >&2; return 1;;
            *)  if [[ -n "$cleanup_command" || "$1" =~ ^[0-9]+$ ]]; then
                echo "comma_trap: unexpected argument '$1' (called: comma_trap $original_args)" >&2; return 1
                else cleanup_command=$1; fi;;
        esac
        shift
    done

    if echo $cleanup_command | grep -q "\<exit\>"; then
        echo "comma_trap: cleanup command cannot contain 'exit' (called: comma_trap $original_args)" >&2; return 1
    fi

    if [[ ! "$exit_code" =~ ^[0-9]+$ ]]; then
        echo "comma_trap: illegal exit code '$exit_code' (called: comma_trap $original_args)" >&2; return 1
    fi

    local trap_options="$kill_option --exit=$exit_code"
    if [[ -n "$script_name" ]]; then trap_options+=" --name=$script_name"; fi
    if [[ ${#signal_list[@]} == 0 ]]; then signal_list=( "SIGINT" "SIGTERM" ); fi

    local sig
    local sig_option
    for sig in ${signal_list[@]}; do
        if [[ $sig == "SIGINT" ]]; then sig_option="--SIGINT"; else sig_option=""; fi
        trap "SIGNAL_NAME='$sig'; comma_trap_bye_impl '$cleanup_command' $trap_options $sig_option" $sig
    done
}
export -f comma_trap

# Used by comma_trap; do not call this function directly.
# Usage: comma_trap_bye_impl <cleanup command> [<options ...>]
# Options:
#   --name=<caller>     Name of script
#   --exit=<exit code>  Exit code to use (default: 1)
#   --SIGINT            Interrupted by SIGINT (control-C)
#   --kill-children     Kill (direct) children of the current process (default)
#   --kill-recursive    Kill all descendants, not just direct children
function comma_trap_bye_impl()
{
    # ignore signals while handling a signal
    trap '' SIGHUP SIGINT SIGTERM SIGPIPE SIGQUIT
    local cleanup_command=$1
    shift

    local exit_code=1
    local caught_sigint=0
    local kill_option
    local script_name
    while [[ $# -ne 0 ]]; do
        case $1 in
            --kill-children|--kill-recursive)
                      kill_option=$1;;
            --SIGINT) caught_sigint=1;;
            --name=*) script_name=${1#*=};;
            --exit=*) exit_code=${1#*=};;
            -*)       echo "comma_trap_bye_impl(): unknown option '$1'" >&2; return 1;;
            *)        echo "comma_trap_bye_impl(): unexpected argument '$1'" >&2; exit 1;;
        esac
        shift
    done

    local msg
    if [[ -n "$script_name" ]]; then msg="$script_name "; fi
    msg+="(pid $BASHPID): comma_trap caught $SIGNAL_NAME"
    local kill_command

    if [[ "$kill_option" == "--kill-children" ]]; then
        kill_command="kill_children"
        msg+=": killing children"
    elif [[ "$kill_option" == "--kill-recursive" ]]; then
        kill_command="kill_children --recursive"
        msg+=": killing children recursively"
    fi
    if (( caught_sigint )); then msg+="; propagating SIGINT"; fi

    echo $msg >&2
    if [[ -n "$kill_command" ]]; then $kill_command; fi
    if [[ -n "$cleanup_command" ]]; then eval "$cleanup_command"; fi

    if (( caught_sigint )); then trap - SIGINT; kill -SIGINT $BASHPID; fi
    exit $exit_code
}
export -f comma_trap_bye_impl

# take path-value pairs, assign the values to corresponding bash variables
# in the variable name slashes will be replaced with given delimiter
#
# delimiter: default '_'
# dash '-': replaced with '_'
# lines starting with '#' ignored
# empty lines ignored
#
# [--export] : variables created export
# [--null-ok]: null variables are defined, otherwise ignored
# [--prefix="<prefix>"]: prefix used for defining variables
# [--delimiter="<delimiter>"]: delimiter used for replacing '/'
# [--no-quotes]: don't quote the values
#
# examples (try them):
#     comma_path_value_to_var < <( echo hello=world )
#     echo $hello
#
#     comma_path_value_to_var < <( echo hello/world=bye )
#     echo $hello__world
#
#     comma_path_value_to_var blah < <( echo hello/world=bye )
#     echo $blah__hello__world
function comma_path_value_to_var()
{
    local prefix=""
    local delimiter="_"
    local export_variable=""
    local null_ok=""
    local no_quotes=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --export) export_variable="export" ;;
        --null-ok) null_ok="true" ;;
        --prefix=*) prefix="${1#*=}" ;;
        --delimiter=*) delimiter="${1#*=}" ;;
        --no-quotes) no_quotes="true" ;;
        esac
        shift
    done

    if [ ! -z "$prefix" ] ; then prefix="$prefix$delimiter" ; fi

    local path=""
    local value=""
    local name=""
    while IFS='=' read path value ; do
        if [[ "$path" == "" ]] ; then continue ; fi
        if [[ "$path" =~ "#" ]] ; then continue ; fi
        if [[ "$value" == "" && "$null_ok" == "" ]] ; then continue ; fi
        name=$prefix$( echo $path | sed "s/\//$delimiter/g" | sed "s/-/_/g" )
        #eval $export_variable $name=\"$value\"
        if [[ -z "$no_quotes" ]] ; then eval $export_variable $name=\"$value\"
        else eval $export_variable $name="$value" ; fi
    done
}
export -f comma_path_value_to_var

# take path-value pairs, output the values of corresponding bash variables
# in the variable name slashes will be replaced with given delimiter
#
# delimiter: default '_'
# dash '-': replaced with '_'
# lines starting with '#' ignored
# empty lines ignored
#
# usage: comma_path_value_from_var [--export] [<prefix>] [<slash replacement>]
#     <prefix>: variable name prefix
#     <slash replacement>: slash replacement; default: _
#     --export: if present, export variables
#
# examples (try them):
#     todo
function comma_path_value_from_var()
{
    local prefix=$1
    local path=""
    local value=""
    local default_value=""
    local name=""
    local delimiter="_"
    if [ ! -z $2 ] ; then delimiter="$2" ; fi
    if [ ! -z $1 ] ; then prefix="$1$delimiter" ; fi
    while IFS='=' read path default_value ; do
        if [[ "$path" == "" ]] ; then continue ; fi
        if [[ "$path" =~ "#" ]] ; then continue ; fi
        name=$prefix$( echo $path | sed "s/\//$delimiter/g" | sed "s/-/_/g" )
        eval value=\$$name
        [[ "$value" == "" && "$default_value" != "" ]] && value=$default_value
        [[ "$value" != "" ]] && echo "$path=$value"
    done
}
export -f comma_path_value_from_var

# usage: my_options=( $( cat name-value-pairs | comma_options_from_name_value [<options>] ) )
#
# options
#     --use-equal-sign: options set as --file=foo.txt; default --file foo.txt
#
# todo: there still may be trouble with option values with spaces inside; check and test it... later...
#
# example (try it)
#      echo -e hello=\"\\\"world\\\"\"\\nverbose=\"true\" | comma_options_from_path_value
function comma_options_from_name_value()
{
    local delimiter='\n'
    if [[ "$1" == "--use-equal-sign" ]] ; then delimiter='=' ; fi
    sed 's/^/--/g' \
        | sed 's/="true"$//g' \
        | sed 's/="false"$//g' \
        | sed 's/="/=/g' \
        | sed 's/"$//g' \
        | sed 's/\\"/"/g' \
        | tr '=' "$delimiter"
}
export -f comma_options_from_name_value

# usage: comma_options_has <what> $@
# example:
#     if (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) ; then usage ; fi
function comma_options_has()
{
    for a in ${@:2} ; do if [[ "$1" == "$a" || "$a" =~ ${1}= ]] ; then echo 1 ; exit ; fi ; done
    echo 0
}
export -f comma_options_has

# verify the overall exit status of a pipeline ($? reports only the status of the last step
# in a pipeline); ignore termination by SIGPIPE
#
# rationale for ignoring SIGPIPE: if in a pipeline " A | B " the process "B" may exit before A,
# so that A (pipe writer) has no reader, then A is killed by SIGPIPE and has non-zero exit status
# however, this may be (and likely is) not an error overall, as B has simply finished
# processing and terminated
#
# example
# A | B | C | D
# if ! status_ok ; then echo "failed"; else echo "ok"; fi

# define this value once to avoid calling subprocesses inside status_ok
SIGPIPE_EXIT_STATUS=$( expr 128 \+ $( kill -l SIGPIPE ) )
export SIGPIPE_EXIT_STATUS

function comma_status_ok()
{
    pipestatus_copy_status_ok=("${PIPESTATUS[@]}")  # make a safe copy
    local outcome_status_ok=""
    for outcome_status_ok in "${pipestatus_copy_status_ok[@]}" ; do
        (( outcome_status_ok == 0 || outcome_status_ok == SIGPIPE_EXIT_STATUS )) || return 1
    done
    return 0
}
export -f comma_status_ok

# Leave only the last of path=value lines with identical paths
# No arguments, stdin to stdout
function comma_take_last_path_value()
{
    tac | sort -u -t= -k1,1 -s
}
export -f comma_take_last_path_value
