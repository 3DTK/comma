#!/bin/bash

name=$( basename $0 )

lat_lon_separator="/"
degrees_char="."
minutes_char="'"

simple_usage()
{
    echo "Usage: $name [-h|--help] [--fields] [-s|--lat-lon-separator=<char>] [-d|--degrees-char=<char>] [-m|--minutes-char=<char>] [--degrees-minutes] [--no-echo-input]" >&2
    if [[ $# != 0 ]]; then exit $1; fi
}

usage()
{
    simple_usage
    cat >&2 <<EOF

Appends a "position" field (in degrees, minutes and seconds) to input that includes the fields "latitude"
and "longitude". By default, these are expected to be the first two fields in the input (use --fields to change).

Options:

    -h|--help                 Show this help
    --fields                  Specify input fields (must include "latitude" and "longitude")
    -s|--lat-lon-separator=   Character to print between latitude and longitude (default "$lat_lon_separator")
    -d|--degrees-char=        Character to print after <degrees> (default "$degrees_char")
    -m|--minutes-char=        Character to print after <minutes> (default "$minutes_char") (ignored if --degrees-minutes is used)
    --degrees-minutes=        Do not print seconds (instead, print three digits for minutes (1/600ths), e.g. 12.200S/145.345E)
    --no-echo-input           Do not echo the input fields

Example:
    
    echo -12.5,145.282 | $name --lat-lon-separator=","

        output: 12.30'00S,145.16'55E

EOF
    if [[ $# != 0 ]]; then exit $1; fi
}

fields="latitude,longitude"
no_seconds=0
echo_input_fields=1

while [[ $# -gt 0 ]]; do
    arg="${1#*=}"
    case "$1" in
        -h|--help)                  usage 0;;
        --fields=*)                 fields=$arg;;
        -s=*|--lat-lon-separator=*) lat_lon_separator=$arg;;
        -d=*|--degrees-char=*)      degrees_char=$arg;;
        -m=*|--minutes-char=*)      minutes_char=$arg;;
        --degrees-minutes)          no_seconds=1;;
        --no-echo-input)            echo_input_fields=0;;
        -*)                         echo "$name: unrecognized option '$1'" >&2; exit 1;;
        *)                          echo "$name: unexpected argument '$1'" >&2; exit 1;;
    esac
    shift
done

# arguments: <csv field list> <field to find>
function find_field()
{
    local field_name=$2
    local n=$( echo $1 | awk -F, '
        { for (f = 1;f <= NF;f++) { if ($f == "'$field_name'") { print f; exit; } } print 0; }' )
    if (( n == 0 )); then echo "$name: input fields must include \"$field_name\"" >&2; return 1; fi
    echo $n
}

lat_field=$( find_field "$fields" "latitude" ) || exit 1    # error message already printed
lon_field=$( find_field "$fields" "longitude" ) || exit 1

awk -F, '
BEGIN { deg_char = "'"$degrees_char"'"; min_char = "'"$minutes_char"'"; lat_lon_separator = "'"$lat_lon_separator"'"; }

{
    if (NF < '$lat_field' || NF < '$lon_field') \
    {
        if ('$echo_input_fields') { print $0 ",,"; }
        next;
    }

    if ('$echo_input_fields') { printf "%s", $0 ","; }

    lat = $'$lat_field';
    lon = $'$lon_field';

    if (lat < 0) { lat = -lat; lat_char = "S"; }
    else { lat_char = "N"; }

    if (lon < 0) { lon = -lon; lon_char = "W"; }
    else { lon_char = "E"; }

    if ('$no_seconds') \
    {
        lat += 0.5 / 600;
        lon += 0.5 / 600;
        lat_deg = int(lat);
        lat_min = int((lat - lat_deg) * 600);
        lon_deg = int(lon);
        lon_min = int((lon - lon_deg) * 600);

        # never print "0.0S" or "0.0W"
        if (lat_deg == 0 && lat_min == 0) { lat_char = "N"; }
        if (lon_deg == 0 && lon_min == 0) { lon_char = "E"; }

        printf "%02d%s%03d%c%s%03d%s%03d%c\n", \
            lat_deg, deg_char, lat_min, lat_char,
            lat_lon_separator, \
            lon_deg, deg_char, lon_min, lon_char;
    }
    else
    {
        lat += 0.5 / (60 * 60);
        lat_deg = int(lat);
        lat = (lat - lat_deg) * 60;
        lat_min = int(lat);
        lat = (lat - lat_min) * 60;
        lat_sec = int(lat);

        lon += 0.5 / (60 * 60);
        lon_deg = int(lon);
        lon = (lon - lon_deg) * 60;
        lon_min = int(lon);
        lon = (lon - lon_min) * 60;
        lon_sec = int(lon);

        # never print "0 0 0S" or "0 0 0W"
        if (lat_deg == 0 && lat_min == 0 && lat_sec == 0) { lat_char = "N"; }
        if (lon_deg == 0 && lon_min == 0 && lon_sec == 0) { lon_char = "E"; }

        printf "%02d%s%02d%s%02d%c%s%03d%s%02d%s%02d%c\n", \
            lat_deg, deg_char, lat_min, min_char, lat_sec, lat_char, \
            lat_lon_separator, \
            lon_deg, deg_char, lon_min, min_char, lon_sec, lon_char;
    }
}
'
