#!/bin/bash

name=$( basename $0 )
inc_events=1
icon="http://web.archive.org/web/20130526145338/http://www.iconbazaar.com/dots/2dot1a.gif"
colour="FF0000"
width=1.5
dash=0
tmp_vert=tmp_vertices.$$

simple_usage()
{
    echo "Usage: $name [-h|--help] [--events|--noevents] { -v=<vertex-file> } { -l=<line-file> } { -p=<polygon-file> } { -e=<edge-file> } {--pos=<lat,lon>} { -i=<icon> } { -c=<colour> } { -w=<width> } { -d|--dash } { -s|--solid }" >&2
}

usage()
{
    simple_usage
    cat >&2 <<EOF

Outputs an HTML page that uses the Google Maps Javascript API to display points, lines and polygons.
Note that Google Maps does not draw great circle arcs, just straight lines.

The "=" in all arguments is optional, so "-c=<colour>" and "-c colour" both work.

NOTE: This script was designed for testing and debugging purposes only, not for production
(there are size limits, and it includes hard coded references to David Fisher's Google Maps key).

Arguments:

    vertex-file     Text file containing points to be displayed individually
                    (format: <latitude>,<longitude>[,<optional_id>])

    line-file       Text file containing points to be displayed as a single line
                    (format: <latitude>,<longitude>)

    polygon-file    Text file containing points to be displayed as a single polygon;
                    the last point is joined to the first point (format: <latitude>,<longitude>)

    edge-file       Text file containing points to be displayed as edges (one edge per line)
                    (format: <latitude 1>,<longitude 1>,<latitude 2>,<longitude 2>)

    lat,lon         Vertex position.

    icon            Following vertices use the specified image
                    e.g. http://www.iconbazaar.com/dots/2dot5a.gif (blue dot).
                    Predefined icons include (red|blue|green|yellow|pink)-(dot|square|triangle|diamond|cube)
                    as well as big-<colour>-diamond, x, x2, red-x.

    colour          Following polygons, lines and edges use the specified colour
                    e.g. "FF0000" (red)
                    Certain predefined colours are available (red, blue, black, etc.)

    width           Following lines, polygons or edges, width of the line to draw (default $width).

Options:

    --[no]events    Exclude/include mouse events for following objects.

    -d|--dash       Following lines, edges and polygons drawn in dashed style.

    -s|--solid      Following lines, edges and polygons drawn in solid (non-dashed) style.

The -v, -e and -p arguments may appear multiple times on the command line.

EOF
}

if [[ $# == 0 ]]; then
    simple_usage
    exit 0
fi

header_printed=0

output_header_once()
{
    if [[ $header_printed == 0 ]]; then
        header_printed=1
        cat <<EOF
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Google Maps</title>
<script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBJmbc6wGe6FUQeIEIGrBs-fcS8uavFqzQ&sensor=false">
</script>

<script>
function initialize()
{
var mapProp = {
  center:new google.maps.LatLng(0.0,0.0),
  zoom:2,
  mapTypeId:google.maps.MapTypeId.ROADMAP,
  disableDefaultUI:true,
  scaleControl:true,
  zoomControl:true,
  mapTypeControl: true
  };

var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

var infowindow = new google.maps.InfoWindow({
    content: ''
});

google.maps.event.addListener(map, 'click', function(e) {
    displayPos(e, map, infowindow)
});

var ic = '$icon';

EOF
    fi
}

output_trailer()
{
    cat <<EOF
}

function displayPos(e, map, infowindow)
{
     infowindow.setContent('<tt>' + e.latLng.lat().toPrecision(8) + ' ' + e.latLng.lng().toPrecision(9) + '</tt>');
     infowindow.setPosition(e.latLng);
     infowindow.open(map);
}

function findNearestPoint(obj, e, map, infowindow)
{
     var nearest = obj.getPath().getAt(0);

     var minDist = google.maps.geometry.spherical.computeDistanceBetween(e.latLng, nearest);

     for (var i = 1;i < obj.getPath().getLength();i++)
     {
          var p = obj.getPath().getAt(i);
          var dist = google.maps.geometry.spherical.computeDistanceBetween(e.latLng, p);

          if (dist < minDist){
            minDist = dist;
            nearest = p;
          }
     }

     infowindow.setContent('<tt><font color=red>' + nearest.lat().toPrecision(8) + ' ' + nearest.lng().toPrecision(9) + '</tt>');
     infowindow.setPosition(nearest);

     infowindow.open(map);
}

function show_info(map, infowindow, pos, txt)
{
   infowindow.setContent(txt + '<br><tt>' + pos.lat().toPrecision(8) + ' ' + pos.lng().toPrecision(9) + '</tt>');
   infowindow.setPosition(pos);
   infowindow.open(map);
}

google.maps.event.addDomListener(window, 'load', initialize);
</script>

<style type="text/css">
html {height:100%}
body {height:100%;margin:0;padding:0}
#googleMap {height:100%}
</style>

</head>

<body>
<div id="googleMap"></div>

</body>
</html>
EOF
}

current=0

output_vertices()
{
    current=$(( $current + 1 ))
    cat "$1" | awk -F, '
        NF >= 2 \
        {
            ++ind;
            name = "m'"$current"'_" ind;
            print "var " name " = new google.maps.Marker({\n" \
                "position: new google.maps.LatLng(" $1 "," $2 "),\n" \
                "icon: ic });\n" \
                name ".setMap(map);\n";
            if ('"$inc_events"' == 1)
            {
                print "google.maps.event.addListener(" name ", '"'"'click'"'"', function() {\n" \
                    "show_info(map, infowindow, " name ".position, '"'"'" $3 "'"'"'); });\n";
            }
        }
    '
}

output_edges()
{
    current=$(( $current + 1 ))
    cat "$1" | awk -F, '
        NF >= 4 \
        {
            coords_name = "coords'"$current"'_" NR;
            print "var " coords_name " = [";
            print "new google.maps.LatLng(" $1 "," $2 "),";
            print "new google.maps.LatLng(" $3 "," $4 ")";
            print "];\n"

            if ('"$dash"') \
            {
                print "var dash'"$current"' = {";
                print "path: '"'"'M 0,-1 0,1'"'"',";
                print "strokeOpacity: 1,";
                print "strokeColor: '"'"'#'"$colour"''"'"',";
                print "scale: '$width'";
                print "};"
            }

            obj_name = "obj'"$current"'_" NR;
            print "var " obj_name " = new google.maps.Polyline({";
            print "path: " coords_name ",";

            if ('"$dash"') \
            {
                print "strokeOpacity: 0.0,";
                rep = int('"$width"' * 5.2);
                print "icons: [{ icon: dash'"$current"', offset: '"'"'0'"'"', repeat: '"'"'" rep "px'"'"' }]";
            } \
            else
            {
                print "strokeColor: '"'"'#'"$colour"''"'"',";
                print "strokeWeight: '"$width"',";
                print "strokeOpacity: 1.0";
            }
            print "});\n";

            print obj_name ".setMap(map);\n";
        }
    '
}

output_point_array()
{
    join_endpoints=$2
    echo "var coords$current = ["

    cat "$1" | awk -F, '
        BEGIN { extra = ""; }
        NF >= 2 \
        {
            if (first_point == "") { first_point = $1 "," $2; }
            printf extra "new google.maps.LatLng(" $1 "," $2 ")"; extra = ",\n";
        }
        END \
        {
            if ("'"$join_endpoints"'" != "") { printf extra "new google.maps.LatLng(" first_point ")"; }
            printf "\n];\n\n";
        }'
}

output_line()
{
    join_endpoints=$2
    current=$(( $current + 1 ))
    output_point_array "$1" $join_endpoints

    echo | awk '
    {
        if ('"$dash"') \
        {
            print "var dash'"$current"' = {";
            print "path: '"'"'M 0,-1 0,1'"'"',";
            print "strokeOpacity: 1,";
            print "strokeColor: '"'"'#'"$colour"''"'"',";
            print "scale: '$width'";
            print "};"
        }

        print "var obj'"$current"' = new google.maps.Polyline({";
        print "path: coords'"$current"',";

        if ('"$dash"') \
        {
            print "strokeOpacity: 0.0,";
            rep = int('"$width"' * 5.2);
            print "icons: [{ icon: dash'"$current"', offset: '"'"'0'"'"', repeat: '"'"'" rep "px'"'"' }]";
        } \
        else
        {
            print "strokeColor: '"'"'#'"$colour"''"'"',";
            print "strokeWeight: '"$width"',";
            print "strokeOpacity: 1.0";
        }
        print "});\n";

        print "obj'"$current"'.setMap(map);\n";
    }'

if [[ $inc_events == 1 ]]; then
cat <<EOF
google.maps.event.addListener(obj$current, 'click', function(e) {
  findNearestPoint(obj$current, e, map, infowindow); });
EOF
fi
}

output_polygon()
{
    current=$(( $current + 1 ))
    output_point_array "$1"
    cat <<EOF
var obj$current = new google.maps.Polygon({
path: coords$current,
strokeColor: '#000000',
strokeWeight: 0,
fillOpacity: 0.25,
fillColor: '#$colour'
});

obj$current.setMap(map);
EOF

if [[ $inc_events == 1 ]]; then
cat <<EOF
google.maps.event.addListener(obj$current, 'click', function(e) {
  displayPos(e, map, infowindow); });
EOF
fi
}

check_file_exists()
{
    if [[ "$1" == "-" ]]; then
        cat > "-"
        trap "rm -f ./-" EXIT
    elif [[ ! -f "$1" ]]; then
        echo "$name: cannot open \"$1\"" >&2
        exit 1
    fi
}

set_icon()
{
    output_header_once
    local icon="$1"
    wayback="http://web.archive.org/web/20130526145338"
    case "$icon" in
        red|red-dot|dot)    icon="$wayback/http://www.iconbazaar.com/dots/2dot1a.gif";;
        yellow|yellow-dot)  icon="$wayback/http://www.iconbazaar.com/dots/2dot2a.gif";;
        green|green-dot)    icon="$wayback/http://www.iconbazaar.com/dots/2dot4a.gif";;
        blue|blue-dot)      icon="$wayback/http://www.iconbazaar.com/dots/2dot5a.gif";;
        pink|pink-dot)      icon="$wayback/http://www.iconbazaar.com/dots/2dot6a.gif";;

        red-cube|cube)      icon="$wayback/http://www.iconbazaar.com/dots/4dot1a.gif";;
        yellow-cube)        icon="$wayback/http://www.iconbazaar.com/dots/4dot2a.gif";;
        green-cube)         icon="$wayback/http://www.iconbazaar.com/dots/4dot4a.gif";;
        blue-cube)          icon="$wayback/http://www.iconbazaar.com/dots/4dot5a.gif";;
        pink-cube)          icon="$wayback/http://www.iconbazaar.com/dots/4dot6a.gif";;

        red-triangle|triangle) icon="$wayback/http://www.iconbazaar.com/dots/6dot1a.gif";;
        yellow-triangle)    icon="$wayback/http://www.iconbazaar.com/dots/6dot2a.gif";;
        green-triangle)     icon="$wayback/http://www.iconbazaar.com/dots/6dot4a.gif";;
        blue-triangle)      icon="$wayback/http://www.iconbazaar.com/dots/6dot5a.gif";;
        pink-triangle)      icon="$wayback/http://www.iconbazaar.com/dots/6dot6a.gif";;

        red-square|square)  icon="$wayback/http://www.iconbazaar.com/dots/8dot1a.gif";;
        yellow-square)      icon="$wayback/http://www.iconbazaar.com/dots/8dot2a.gif";;
        green-square)       icon="$wayback/http://www.iconbazaar.com/dots/8dot4a.gif";;
        blue-square)        icon="$wayback/http://www.iconbazaar.com/dots/8dot5a.gif";;
        pink-square)        icon="$wayback/http://www.iconbazaar.com/dots/8dot6a.gif";;

        red-diamond|diamond) icon="$wayback/http://www.iconbazaar.com/dots/10dot1a.gif";;
        yellow-diamond)     icon="$wayback/http://www.iconbazaar.com/dots/10dot2a.gif";;
        green-diamond)      icon="$wayback/http://www.iconbazaar.com/dots/10dot4a.gif";;
        blue-diamond)       icon="$wayback/http://www.iconbazaar.com/dots/10dot5a.gif";;
        pink-diamond)       icon="$wayback/http://www.iconbazaar.com/dots/10dot6a.gif";;

        big-red-diamond|big-diamond) icon="$wayback/http://www.iconbazaar.com/dots/17dot1a.gif";;
        big-yellow-diamond) icon="$wayback/http://www.iconbazaar.com/dots/17dot2a.gif";;
        big-green-diamond)  icon="$wayback/http://www.iconbazaar.com/dots/17dot4a.gif";;
        big-blue-diamond)   icon="$wayback/http://www.iconbazaar.com/dots/17dot5a.gif";;
        big-pink-diamond)   icon="$wayback/http://www.iconbazaar.com/dots/17dot6a.gif";;

        red-arrow|arrow)    icon="$wayback/http://www.iconbazaar.com/arrows/arrw01_31a.gif";;
        yellow-arrow)       icon="$wayback/http://www.iconbazaar.com/arrows/arrw01_32a.gif";;
        green-arrow)        icon="$wayback/http://www.iconbazaar.com/arrows/arrw01_34a.gif";;
        blue-arrow)         icon="$wayback/http://www.iconbazaar.com/arrows/arrw01_35a.gif";;
        pink-arrow)         icon="$wayback/http://www.iconbazaar.com/arrows/arrw01_36a.gif";;

        x|black-x)          icon="https://cdn1.iconfinder.com/data/icons/iconic/raster/32/x_alt.png";;
        x2|black-circle-x)  icon="https://cdn1.iconfinder.com/data/icons/iconic/raster/32/x_alt.png";;
        red-x)              icon="https://cdn1.iconfinder.com/data/icons/lynx/16x16/actions/dialog-close.png";;

        http*|file*) ;;
        *) echo "$name: unknown icon '$icon'" >&2
           exit 1 ;;
    esac
    echo "ic = '$icon';";
}

set_colour()
{
    colour="$1"

    case "$colour" in
        [0-9][0-9][0-9][0-9][0-9][0-9]) ;;
        black)  colour=000000;;
        white)  colour=FFFFFF;;
        red)    colour=FF0000;;
        blue)   colour=0000E0;;
        green)  colour=00A000;;
        yellow) colour=E8E800;;
        orange) colour=FFA000;;
        purple) colour=A000FF;;
        pink)   colour=FF60FF;;
        brown)  colour=805030;;
        grey|gray) colour=808080;;
        *)     echo "$name: unknown colour '$colour'" >&2
               exit 1 ;;
    esac
}


# arguments: filename
process_vertices()
{
    check_file_exists "$1" || exit 1
    output_header_once
    output_vertices "$1"
}

process_lines()
{
    check_file_exists "$1" || exit 1
    output_header_once
    output_line "$1"
}

process_polygons()
{
    check_file_exists "$1" || exit 1
    output_header_once
    output_polygon "$1"
    output_line "$1" join_endpoints
}

process_edges()
{
    check_file_exists "$1" || exit 1
    output_header_once
    output_edges "$1"
}

single_vertex()
{
    echo "$1" > "$tmp_vert"
    process_vertices "$tmp_vert"
    rm -f "$tmp_vert"
}

while [[ $# -gt 0 ]]; do
    case "$1" in
    -h|--help) usage
               exit 0
               ;;

    -i) shift; set_icon "$1"
          ;;
    -i=*) set_icon "${1#*=}"
          ;;

    -c) shift; set_colour "$1"
          ;;
    -c=*) set_colour "${1#*=}"
          ;;

    -w) shift; width="$1"
          ;;
    -w=*) width="${1#*=}"
          ;;

    -v) shift; process_vertices "$1"
          ;;
    -v=*) process_vertices "${1#*=}"
          ;;

    -l) shift; process_lines "$1"
          ;;
    -l=*) process_lines "${1#*=}"
          ;;

    -p) shift; process_polygons "$1"
          ;;
    -p=*) process_polygons "${1#*=}"
          ;;

    -e) shift; process_edges "$1"
          ;;
    -e=*) process_edges "${1#*=}"
          ;;

    --pos) shift; single_vertex "$1"
           ;;
    --pos=*) single_vertex "${1#*=}"
           ;;

    -d|--dash*) dash=1
           ;;

    -s|--solid) dash=0
           ;;

    --events) inc_events=1
          ;;

    --noevents) inc_events=0
          ;;

    -*) echo "$name: unknown option \"$1\"" >&2
        simple_usage
        exit 1
        ;;

    *) echo "$name: unexpected argument \"$1\"" >&2
        simple_usage
        exit 1
        ;;
    esac
    shift
done

output_trailer

